name: CI
on:
  push:
    branches:
      - main
  pull_request:
  workflow_call:
  workflow_dispatch:
jobs:
  set_matrix:
    name: Set Matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v3
      - id: set-matrix
        run: |
          extensions=$(./script/list-extensions)
          echo "matrix=$extensions" >> "$GITHUB_OUTPUT"
  build:
    name: Build Extensions
    runs-on: ${{ matrix.runs-on }}
    needs: set_matrix
    strategy:
      fail-fast: false
      matrix:
        runs-on:
          - buildjet-4vcpu-ubuntu-2204
          - buildjet-4vcpu-ubuntu-2204-arm
        extension: ${{ fromJSON(needs.set_matrix.outputs.matrix) }}
        include:
          - runs-on: buildjet-4vcpu-ubuntu-2204
            arch: amd64
          - runs-on: buildjet-4vcpu-ubuntu-2204-arm
            arch: arm64
    steps:
      - uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Install pgxman
        env:
          REPO: pgxman/pgxman
        run: |
          wget -O /tmp/pgxman_linux_${{ matrix.arch }}.deb https://github.com/pgxman/release/releases/latest/download/pgxman_linux_${{ matrix.arch }}.deb
          sudo apt install /tmp/pgxman_linux_${{ matrix.arch }}.deb -y
      - name: Build
        run: |
          pgxman build \
            --file "$(pwd)/buildkit/${{ matrix.extension }}.yaml" \
            --set "arch=[${{ matrix.arch }}]" \
            --cache-from "type=gha,scope=${{ matrix.extension }}" \
            --cache-to "type=gha,mode=max,scope=${{ matrix.extension }}"
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.extension }}
          if-no-files-found: error
          retention-days: 7
          path: |
            out/*.*
  publish:
    name: Publish Extensions
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: buildjet/setup-ruby@v1
        with:
          ruby-version: 3.2.2
      - uses: actions/checkout@v3
        with:
          repository: deb-s3/deb-s3
          ref: ee4fb051073a8387c9d3d5275a41194b62942c83
      - name: Install deb-s3
        run: |
          gem build
          gem install deb-s3-0.11.7.gem
      - name: Import GPG Key
        env:
          GPG_PRIVATE: ${{ secrets.GPG_PRIVATE }}
          GPG_PUBLIC: ${{ secrets.GPG_PUBLIC }}
        run: |
          echo -e "$GPG_PRIVATE" | gpg --import --no-tty --batch --yes
          echo -e "$GPG_PUBLIC" | gpg --import --no-tty --batch --yes
          echo "allow-preset-passphrase" > ~/.gnupg/gpg-agent.conf
          gpg-connect-agent RELOADAGENT /bye
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts
      - name: Publish Artifacts
        env:
          AWS_DEBIAN_S3_BUCKET: ${{ secrets.AWS_DEBIAN_S3_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          GPG_SIGNING_KEY_ID: C9ADBB93237BCD3B
        run: |
          tree ./artifacts
          deb-s3 upload \
            --lock \
            --bucket $AWS_DEBIAN_S3_BUCKET \
            --visibility public \
            --sign $GPG_SIGNING_KEY_ID \
            ./artifacts/**/*.deb
