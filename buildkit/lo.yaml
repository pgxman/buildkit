---
apiVersion: v1
name: lo
repository: https://github.com/postgres/postgres
description: Large Object maintenance
license: PostgreSQL
arch:
- amd64
- arm64
maintainers:
- name: Jonathan Dance
  email: jd@hydra.so
- name: Owen Ou
  email: o@hydra.so
build:
  main:
  - name: Build lo
    run: |
      cd contrib/lo
      make
      DESTDIR=${DESTDIR} make install
overrides:
  pgVersions:
    '16':
      source: https://ftp.postgresql.org/pub/source/v16.1/postgresql-16.1.tar.gz
      version: 16.1.0
      homepage: https://www.postgresql.org/docs/16/lo.html
      readme: |
        For formatted documentation, please see https://www.postgresql.org/docs/16/lo.html.

        ```
           #[1]F.21. isn -- data types for international standard numbers (ISBN,
           EAN, UPC, etc.) [2]F.23. ltree -- hierarchical tree-like data type

           F.22. lo -- manage large objects
           [3]Prev  [4]Up Appendix F. Additional Supplied Modules and Extensions
           [5]Home  [6]Next
             __________________________________________________________________

        F.22. lo -- manage large objects [7]#

           [8]F.22.1. Rationale
           [9]F.22.2. How to Use It
           [10]F.22.3. Limitations
           [11]F.22.4. Author

           The lo module provides support for managing Large Objects (also called
           LOs or BLOBs). This includes a data type lo and a trigger lo_manage.

           This module is considered "trusted", that is, it can be installed by
           non-superusers who have CREATE privilege on the current database.

        F.22.1. Rationale [12]#

           One of the problems with the JDBC driver (and this affects the ODBC
           driver also), is that the specification assumes that references to
           BLOBs (Binary Large OBjects) are stored within a table, and if that
           entry is changed, the associated BLOB is deleted from the database.

           As PostgreSQL stands, this doesn't occur. Large objects are treated as
           objects in their own right; a table entry can reference a large object
           by OID, but there can be multiple table entries referencing the same
           large object OID, so the system doesn't delete the large object just
           because you change or remove one such entry.

           Now this is fine for PostgreSQL-specific applications, but standard
           code using JDBC or ODBC won't delete the objects, resulting in orphan
           objects -- objects that are not referenced by anything, and simply
           occupy disk space.

           The lo module allows fixing this by attaching a trigger to tables that
           contain LO reference columns. The trigger essentially just does a
           lo_unlink whenever you delete or modify a value referencing a large
           object. When you use this trigger, you are assuming that there is only
           one database reference to any large object that is referenced in a
           trigger-controlled column!

           The module also provides a data type lo, which is really just a
           [13]domain over the oid type. This is useful for differentiating
           database columns that hold large object references from those that are
           OIDs of other things. You don't have to use the lo type to use the
           trigger, but it may be convenient to use it to keep track of which
           columns in your database represent large objects that you are managing
           with the trigger. It is also rumored that the ODBC driver gets confused
           if you don't use lo for BLOB columns.

        F.22.2. How to Use It [14]#

           Here's a simple example of usage:
        CREATE TABLE image (title text, raster lo);

        CREATE TRIGGER t_raster BEFORE UPDATE OR DELETE ON image
            FOR EACH ROW EXECUTE FUNCTION lo_manage(raster);

           For each column that will contain unique references to large objects,
           create a BEFORE UPDATE OR DELETE trigger, and give the column name as
           the sole trigger argument. You can also restrict the trigger to only
           execute on updates to the column by using BEFORE UPDATE OF column_name.
           If you need multiple lo columns in the same table, create a separate
           trigger for each one, remembering to give a different name to each
           trigger on the same table.

        F.22.3. Limitations [15]#

             * Dropping a table will still orphan any objects it contains, as the
               trigger is not executed. You can avoid this by preceding the DROP
               TABLE with DELETE FROM table.
               TRUNCATE has the same hazard.
               If you already have, or suspect you have, orphaned large objects,
               see the [16]vacuumlo module to help you clean them up. It's a good
               idea to run vacuumlo occasionally as a back-stop to the lo_manage
               trigger.
             * Some frontends may create their own tables, and will not create the
               associated trigger(s). Also, users may not remember (or know) to
               create the triggers.

        F.22.4. Author [17]#

           Peter Mount <[18]peter@retep.org.uk>
             __________________________________________________________________

           [19]Prev  [20]Up  [21]Next
           F.21. isn -- data types for international standard numbers (ISBN, EAN,
           UPC, etc.)  [22]Home  F.23. ltree -- hierarchical tree-like data type


        ```
    '15':
      source: https://ftp.postgresql.org/pub/source/v15.5/postgresql-15.5.tar.gz
      version: 15.5.0
      homepage: https://www.postgresql.org/docs/15/lo.html
      readme: |
        For formatted documentation, please see https://www.postgresql.org/docs/15/lo.html.

        ```
           #[1]F.21. isn [2]F.23. ltree

                                          F.22. lo
           [3]Prev  [4]Up Appendix F. Additional Supplied Modules [5]Home  [6]Next
             __________________________________________________________________

        F.22. lo

           [7]F.22.1. Rationale
           [8]F.22.2. How to Use It
           [9]F.22.3. Limitations
           [10]F.22.4. Author

           The lo module provides support for managing Large Objects (also called
           LOs or BLOBs). This includes a data type lo and a trigger lo_manage.

           This module is considered "trusted", that is, it can be installed by
           non-superusers who have CREATE privilege on the current database.

        F.22.1. Rationale

           One of the problems with the JDBC driver (and this affects the ODBC
           driver also), is that the specification assumes that references to
           BLOBs (Binary Large OBjects) are stored within a table, and if that
           entry is changed, the associated BLOB is deleted from the database.

           As PostgreSQL stands, this doesn't occur. Large objects are treated as
           objects in their own right; a table entry can reference a large object
           by OID, but there can be multiple table entries referencing the same
           large object OID, so the system doesn't delete the large object just
           because you change or remove one such entry.

           Now this is fine for PostgreSQL-specific applications, but standard
           code using JDBC or ODBC won't delete the objects, resulting in orphan
           objects -- objects that are not referenced by anything, and simply
           occupy disk space.

           The lo module allows fixing this by attaching a trigger to tables that
           contain LO reference columns. The trigger essentially just does a
           lo_unlink whenever you delete or modify a value referencing a large
           object. When you use this trigger, you are assuming that there is only
           one database reference to any large object that is referenced in a
           trigger-controlled column!

           The module also provides a data type lo, which is really just a
           [11]domain over the oid type. This is useful for differentiating
           database columns that hold large object references from those that are
           OIDs of other things. You don't have to use the lo type to use the
           trigger, but it may be convenient to use it to keep track of which
           columns in your database represent large objects that you are managing
           with the trigger. It is also rumored that the ODBC driver gets confused
           if you don't use lo for BLOB columns.

        F.22.2. How to Use It

           Here's a simple example of usage:
        CREATE TABLE image (title text, raster lo);

        CREATE TRIGGER t_raster BEFORE UPDATE OR DELETE ON image
            FOR EACH ROW EXECUTE FUNCTION lo_manage(raster);

           For each column that will contain unique references to large objects,
           create a BEFORE UPDATE OR DELETE trigger, and give the column name as
           the sole trigger argument. You can also restrict the trigger to only
           execute on updates to the column by using BEFORE UPDATE OF column_name.
           If you need multiple lo columns in the same table, create a separate
           trigger for each one, remembering to give a different name to each
           trigger on the same table.

        F.22.3. Limitations

             * Dropping a table will still orphan any objects it contains, as the
               trigger is not executed. You can avoid this by preceding the DROP
               TABLE with DELETE FROM table.
               TRUNCATE has the same hazard.
               If you already have, or suspect you have, orphaned large objects,
               see the [12]vacuumlo module to help you clean them up. It's a good
               idea to run vacuumlo occasionally as a back-stop to the lo_manage
               trigger.
             * Some frontends may create their own tables, and will not create the
               associated trigger(s). Also, users may not remember (or know) to
               create the triggers.

        F.22.4. Author

           Peter Mount <[13]peter@retep.org.uk>
             __________________________________________________________________

           [14]Prev    [15]Up      [16]Next
           F.21. isn  [17]Home  F.23. ltree


        ```
    '14':
      source: https://ftp.postgresql.org/pub/source/v14.10/postgresql-14.10.tar.gz
      version: 14.10.0
      homepage: https://www.postgresql.org/docs/14/lo.html
      readme: |
        For formatted documentation, please see https://www.postgresql.org/docs/14/lo.html.

        ```
           #[1]F.19. isn [2]F.21. ltree

                                          F.20. lo
           [3]Prev  [4]Up Appendix F. Additional Supplied Modules [5]Home  [6]Next
             __________________________________________________________________

        F.20. lo

           [7]F.20.1. Rationale
           [8]F.20.2. How to Use It
           [9]F.20.3. Limitations
           [10]F.20.4. Author

           The lo module provides support for managing Large Objects (also called
           LOs or BLOBs). This includes a data type lo and a trigger lo_manage.

           This module is considered "trusted", that is, it can be installed by
           non-superusers who have CREATE privilege on the current database.

        F.20.1. Rationale

           One of the problems with the JDBC driver (and this affects the ODBC
           driver also), is that the specification assumes that references to
           BLOBs (Binary Large OBjects) are stored within a table, and if that
           entry is changed, the associated BLOB is deleted from the database.

           As PostgreSQL stands, this doesn't occur. Large objects are treated as
           objects in their own right; a table entry can reference a large object
           by OID, but there can be multiple table entries referencing the same
           large object OID, so the system doesn't delete the large object just
           because you change or remove one such entry.

           Now this is fine for PostgreSQL-specific applications, but standard
           code using JDBC or ODBC won't delete the objects, resulting in orphan
           objects -- objects that are not referenced by anything, and simply
           occupy disk space.

           The lo module allows fixing this by attaching a trigger to tables that
           contain LO reference columns. The trigger essentially just does a
           lo_unlink whenever you delete or modify a value referencing a large
           object. When you use this trigger, you are assuming that there is only
           one database reference to any large object that is referenced in a
           trigger-controlled column!

           The module also provides a data type lo, which is really just a domain
           of the oid type. This is useful for differentiating database columns
           that hold large object references from those that are OIDs of other
           things. You don't have to use the lo type to use the trigger, but it
           may be convenient to use it to keep track of which columns in your
           database represent large objects that you are managing with the
           trigger. It is also rumored that the ODBC driver gets confused if you
           don't use lo for BLOB columns.

        F.20.2. How to Use It

           Here's a simple example of usage:
        CREATE TABLE image (title text, raster lo);

        CREATE TRIGGER t_raster BEFORE UPDATE OR DELETE ON image
            FOR EACH ROW EXECUTE FUNCTION lo_manage(raster);

           For each column that will contain unique references to large objects,
           create a BEFORE UPDATE OR DELETE trigger, and give the column name as
           the sole trigger argument. You can also restrict the trigger to only
           execute on updates to the column by using BEFORE UPDATE OF column_name.
           If you need multiple lo columns in the same table, create a separate
           trigger for each one, remembering to give a different name to each
           trigger on the same table.

        F.20.3. Limitations

             * Dropping a table will still orphan any objects it contains, as the
               trigger is not executed. You can avoid this by preceding the DROP
               TABLE with DELETE FROM table.
               TRUNCATE has the same hazard.
               If you already have, or suspect you have, orphaned large objects,
               see the [11]vacuumlo module to help you clean them up. It's a good
               idea to run vacuumlo occasionally as a back-stop to the lo_manage
               trigger.
             * Some frontends may create their own tables, and will not create the
               associated trigger(s). Also, users may not remember (or know) to
               create the triggers.

        F.20.4. Author

           Peter Mount <[12]peter@retep.org.uk>
             __________________________________________________________________

           [13]Prev    [14]Up      [15]Next
           F.19. isn  [16]Home  F.21. ltree


        ```
    '13':
      source: https://ftp.postgresql.org/pub/source/v13.13/postgresql-13.13.tar.gz
      version: 13.13.0
      homepage: https://www.postgresql.org/docs/13/lo.html
      readme: |
        For formatted documentation, please see https://www.postgresql.org/docs/13/lo.html.

        ```
           #[1]F.19. isn [2]F.21. ltree

                                          F.20. lo
           [3]Prev  [4]Up Appendix F. Additional Supplied Modules [5]Home  [6]Next
             __________________________________________________________________

        F.20. lo

           [7]F.20.1. Rationale
           [8]F.20.2. How to Use It
           [9]F.20.3. Limitations
           [10]F.20.4. Author

           The lo module provides support for managing Large Objects (also called
           LOs or BLOBs). This includes a data type lo and a trigger lo_manage.

           This module is considered "trusted", that is, it can be installed by
           non-superusers who have CREATE privilege on the current database.

        F.20.1. Rationale

           One of the problems with the JDBC driver (and this affects the ODBC
           driver also), is that the specification assumes that references to
           BLOBs (Binary Large OBjects) are stored within a table, and if that
           entry is changed, the associated BLOB is deleted from the database.

           As PostgreSQL stands, this doesn't occur. Large objects are treated as
           objects in their own right; a table entry can reference a large object
           by OID, but there can be multiple table entries referencing the same
           large object OID, so the system doesn't delete the large object just
           because you change or remove one such entry.

           Now this is fine for PostgreSQL-specific applications, but standard
           code using JDBC or ODBC won't delete the objects, resulting in orphan
           objects -- objects that are not referenced by anything, and simply
           occupy disk space.

           The lo module allows fixing this by attaching a trigger to tables that
           contain LO reference columns. The trigger essentially just does a
           lo_unlink whenever you delete or modify a value referencing a large
           object. When you use this trigger, you are assuming that there is only
           one database reference to any large object that is referenced in a
           trigger-controlled column!

           The module also provides a data type lo, which is really just a domain
           of the oid type. This is useful for differentiating database columns
           that hold large object references from those that are OIDs of other
           things. You don't have to use the lo type to use the trigger, but it
           may be convenient to use it to keep track of which columns in your
           database represent large objects that you are managing with the
           trigger. It is also rumored that the ODBC driver gets confused if you
           don't use lo for BLOB columns.

        F.20.2. How to Use It

           Here's a simple example of usage:
        CREATE TABLE image (title text, raster lo);

        CREATE TRIGGER t_raster BEFORE UPDATE OR DELETE ON image
            FOR EACH ROW EXECUTE FUNCTION lo_manage(raster);

           For each column that will contain unique references to large objects,
           create a BEFORE UPDATE OR DELETE trigger, and give the column name as
           the sole trigger argument. You can also restrict the trigger to only
           execute on updates to the column by using BEFORE UPDATE OF column_name.
           If you need multiple lo columns in the same table, create a separate
           trigger for each one, remembering to give a different name to each
           trigger on the same table.

        F.20.3. Limitations

             * Dropping a table will still orphan any objects it contains, as the
               trigger is not executed. You can avoid this by preceding the DROP
               TABLE with DELETE FROM table.
               TRUNCATE has the same hazard.
               If you already have, or suspect you have, orphaned large objects,
               see the [11]vacuumlo module to help you clean them up. It's a good
               idea to run vacuumlo occasionally as a back-stop to the lo_manage
               trigger.
             * Some frontends may create their own tables, and will not create the
               associated trigger(s). Also, users may not remember (or know) to
               create the triggers.

        F.20.4. Author

           Peter Mount <[12]peter@retep.org.uk>
             __________________________________________________________________

           [13]Prev    [14]Up      [15]Next
           F.19. isn  [16]Home  F.21. ltree


        ```
pgVersions:
- '16'
- '15'
- '14'
- '13'
