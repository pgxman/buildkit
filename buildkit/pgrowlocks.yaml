---
apiVersion: v1
name: pgrowlocks
repository: https://github.com/postgres/postgres
description: show row-level locking information
license: PostgreSQL
arch:
- amd64
- arm64
maintainers:
- name: Jonathan Dance
  email: jd@hydra.so
- name: Owen Ou
  email: o@hydra.so
build:
  main:
  - name: Build pgrowlocks
    run: |
      cd contrib/pgrowlocks
      make
      DESTDIR=${DESTDIR} make install
overrides:
  pgVersions:
    '16':
      source: https://ftp.postgresql.org/pub/source/v16.1/postgresql-16.1.tar.gz
      version: 16.1.0
      homepage: https://www.postgresql.org/docs/16/pgrowlocks.html
      readme: |
        For formatted documentation, please see https://www.postgresql.org/docs/16/pgrowlocks.html.

        ```
           #[1]F.30. pg_prewarm -- preload relation data into buffer caches
           [2]F.32. pg_stat_statements -- track statistics of SQL planning and
           execution

           F.31. pgrowlocks -- show a table's row locking information
           [3]Prev  [4]Up Appendix F. Additional Supplied Modules and Extensions
           [5]Home  [6]Next
             __________________________________________________________________

        F.31. pgrowlocks -- show a table's row locking information [7]#

           [8]F.31.1. Overview
           [9]F.31.2. Sample Output
           [10]F.31.3. Author

           The pgrowlocks module provides a function to show row locking
           information for a specified table.

           By default use is restricted to superusers, roles with privileges of
           the pg_stat_scan_tables role, and users with SELECT permissions on the
           table.

        F.31.1. Overview [11]#

        pgrowlocks(text) returns setof record

           The parameter is the name of a table. The result is a set of records,
           with one row for each locked row within the table. The output columns
           are shown in [12]Table F.21.

           Table F.21. pgrowlocks Output Columns
           Name Type Description
           locked_row tid Tuple ID (TID) of locked row
           locker xid Transaction ID of locker, or multixact ID if
           multitransaction; see [13]Section 74.1
           multi boolean True if locker is a multitransaction
           xids xid[] Transaction IDs of lockers (more than one if
           multitransaction)
           modes text[] Lock mode of lockers (more than one if multitransaction),
           an array of Key Share, Share, For No Key Update, No Key Update, For
           Update, Update.
           pids integer[] Process IDs of locking backends (more than one if
           multitransaction)

           pgrowlocks takes AccessShareLock for the target table and reads each
           row one by one to collect the row locking information. This is not very
           speedy for a large table. Note that:
            1. If an ACCESS EXCLUSIVE lock is taken on the table, pgrowlocks will
               be blocked.
            2. pgrowlocks is not guaranteed to produce a self-consistent snapshot.
               It is possible that a new row lock is taken, or an old lock is
               freed, during its execution.

           pgrowlocks does not show the contents of locked rows. If you want to
           take a look at the row contents at the same time, you could do
           something like this:
        SELECT * FROM accounts AS a, pgrowlocks('accounts') AS p
          WHERE p.locked_row = a.ctid;

           Be aware however that such a query will be very inefficient.

        F.31.2. Sample Output [14]#

        =# SELECT * FROM pgrowlocks('t1');
         locked_row | locker | multi | xids  |     modes      |  pids
        ------------+--------+-------+-------+----------------+--------
         (0,1)      |    609 | f     | {609} | {"For Share"}  | {3161}
         (0,2)      |    609 | f     | {609} | {"For Share"}  | {3161}
         (0,3)      |    607 | f     | {607} | {"For Update"} | {3107}
         (0,4)      |    607 | f     | {607} | {"For Update"} | {3107}
        (4 rows)

        F.31.3. Author [15]#

           Tatsuo Ishii
             __________________________________________________________________

        [16]Prev                                                       [17]Up   [18]Next
        F.30. pg_prewarm -- preload relation data into buffer caches  [19]Home
            F.32. pg_stat_statements -- track statistics of SQL planning and
           execution


        ```
    '15':
      source: https://ftp.postgresql.org/pub/source/v15.5/postgresql-15.5.tar.gz
      version: 15.5.0
      homepage: https://www.postgresql.org/docs/15/pgrowlocks.html
      readme: |
        For formatted documentation, please see https://www.postgresql.org/docs/15/pgrowlocks.html.

        ```
           #[1]F.30. pg_prewarm [2]F.32. pg_stat_statements

                                      F.31. pgrowlocks
           [3]Prev  [4]Up Appendix F. Additional Supplied Modules [5]Home  [6]Next
             __________________________________________________________________

        F.31. pgrowlocks

           [7]F.31.1. Overview
           [8]F.31.2. Sample Output
           [9]F.31.3. Author

           The pgrowlocks module provides a function to show row locking
           information for a specified table.

           By default use is restricted to superusers, roles with privileges of
           the pg_stat_scan_tables role, and users with SELECT permissions on the
           table.

        F.31.1. Overview

        pgrowlocks(text) returns setof record

           The parameter is the name of a table. The result is a set of records,
           with one row for each locked row within the table. The output columns
           are shown in [10]Table F.19.

           Table F.19. pgrowlocks Output Columns
           Name Type Description
           locked_row tid Tuple ID (TID) of locked row
           locker xid Transaction ID of locker, or multixact ID if
           multitransaction
           multi boolean True if locker is a multitransaction
           xids xid[] Transaction IDs of lockers (more than one if
           multitransaction)
           modes text[] Lock mode of lockers (more than one if multitransaction),
           an array of Key Share, Share, For No Key Update, No Key Update, For
           Update, Update.
           pids integer[] Process IDs of locking backends (more than one if
           multitransaction)

           pgrowlocks takes AccessShareLock for the target table and reads each
           row one by one to collect the row locking information. This is not very
           speedy for a large table. Note that:
            1. If an ACCESS EXCLUSIVE lock is taken on the table, pgrowlocks will
               be blocked.
            2. pgrowlocks is not guaranteed to produce a self-consistent snapshot.
               It is possible that a new row lock is taken, or an old lock is
               freed, during its execution.

           pgrowlocks does not show the contents of locked rows. If you want to
           take a look at the row contents at the same time, you could do
           something like this:
        SELECT * FROM accounts AS a, pgrowlocks('accounts') AS p
          WHERE p.locked_row = a.ctid;

           Be aware however that such a query will be very inefficient.

        F.31.2. Sample Output

        =# SELECT * FROM pgrowlocks('t1');
         locked_row | locker | multi | xids  |     modes      |  pids
        ------------+--------+-------+-------+----------------+--------
         (0,1)      |    609 | f     | {609} | {"For Share"}  | {3161}
         (0,2)      |    609 | f     | {609} | {"For Share"}  | {3161}
         (0,3)      |    607 | f     | {607} | {"For Update"} | {3107}
         (0,4)      |    607 | f     | {607} | {"For Update"} | {3107}
        (4 rows)

        F.31.3. Author

           Tatsuo Ishii
             __________________________________________________________________

           [11]Prev           [12]Up                   [13]Next
           F.30. pg_prewarm  [14]Home  F.32. pg_stat_statements


        ```
    '14':
      source: https://ftp.postgresql.org/pub/source/v14.10/postgresql-14.10.tar.gz
      version: 14.10.0
      homepage: https://www.postgresql.org/docs/14/pgrowlocks.html
      readme: |
        For formatted documentation, please see https://www.postgresql.org/docs/14/pgrowlocks.html.

        ```
           #[1]F.28. pg_prewarm [2]F.30. pg_stat_statements

                                      F.29. pgrowlocks
           [3]Prev  [4]Up Appendix F. Additional Supplied Modules [5]Home  [6]Next
             __________________________________________________________________

        F.29. pgrowlocks

           [7]F.29.1. Overview
           [8]F.29.2. Sample Output
           [9]F.29.3. Author

           The pgrowlocks module provides a function to show row locking
           information for a specified table.

           By default use is restricted to superusers, members of the
           pg_stat_scan_tables role, and users with SELECT permissions on the
           table.

        F.29.1. Overview

        pgrowlocks(text) returns setof record

           The parameter is the name of a table. The result is a set of records,
           with one row for each locked row within the table. The output columns
           are shown in [10]Table F.20.

           Table F.20. pgrowlocks Output Columns
           Name Type Description
           locked_row tid Tuple ID (TID) of locked row
           locker xid Transaction ID of locker, or multixact ID if
           multitransaction
           multi boolean True if locker is a multitransaction
           xids xid[] Transaction IDs of lockers (more than one if
           multitransaction)
           modes text[] Lock mode of lockers (more than one if multitransaction),
           an array of Key Share, Share, For No Key Update, No Key Update, For
           Update, Update.
           pids integer[] Process IDs of locking backends (more than one if
           multitransaction)

           pgrowlocks takes AccessShareLock for the target table and reads each
           row one by one to collect the row locking information. This is not very
           speedy for a large table. Note that:
            1. If an ACCESS EXCLUSIVE lock is taken on the table, pgrowlocks will
               be blocked.
            2. pgrowlocks is not guaranteed to produce a self-consistent snapshot.
               It is possible that a new row lock is taken, or an old lock is
               freed, during its execution.

           pgrowlocks does not show the contents of locked rows. If you want to
           take a look at the row contents at the same time, you could do
           something like this:
        SELECT * FROM accounts AS a, pgrowlocks('accounts') AS p
          WHERE p.locked_row = a.ctid;

           Be aware however that such a query will be very inefficient.

        F.29.2. Sample Output

        =# SELECT * FROM pgrowlocks('t1');
         locked_row | locker | multi | xids  |     modes      |  pids
        ------------+--------+-------+-------+----------------+--------
         (0,1)      |    609 | f     | {609} | {"For Share"}  | {3161}
         (0,2)      |    609 | f     | {609} | {"For Share"}  | {3161}
         (0,3)      |    607 | f     | {607} | {"For Update"} | {3107}
         (0,4)      |    607 | f     | {607} | {"For Update"} | {3107}
        (4 rows)

        F.29.3. Author

           Tatsuo Ishii
             __________________________________________________________________

           [11]Prev           [12]Up                   [13]Next
           F.28. pg_prewarm  [14]Home  F.30. pg_stat_statements


        ```
    '13':
      source: https://ftp.postgresql.org/pub/source/v13.13/postgresql-13.13.tar.gz
      version: 13.13.0
      homepage: https://www.postgresql.org/docs/13/pgrowlocks.html
      readme: |
        For formatted documentation, please see https://www.postgresql.org/docs/13/pgrowlocks.html.

        ```
           #[1]F.27. pg_prewarm [2]F.29. pg_stat_statements

                                      F.28. pgrowlocks
           [3]Prev  [4]Up Appendix F. Additional Supplied Modules [5]Home  [6]Next
             __________________________________________________________________

        F.28. pgrowlocks

           [7]F.28.1. Overview
           [8]F.28.2. Sample Output
           [9]F.28.3. Author

           The pgrowlocks module provides a function to show row locking
           information for a specified table.

           By default use is restricted to superusers, members of the
           pg_stat_scan_tables role, and users with SELECT permissions on the
           table.

        F.28.1. Overview

        pgrowlocks(text) returns setof record

           The parameter is the name of a table. The result is a set of records,
           with one row for each locked row within the table. The output columns
           are shown in [10]Table F.20.

           Table F.20. pgrowlocks Output Columns
           Name Type Description
           locked_row tid Tuple ID (TID) of locked row
           locker xid Transaction ID of locker, or multixact ID if
           multitransaction
           multi boolean True if locker is a multitransaction
           xids xid[] Transaction IDs of lockers (more than one if
           multitransaction)
           modes text[] Lock mode of lockers (more than one if multitransaction),
           an array of Key Share, Share, For No Key Update, No Key Update, For
           Update, Update.
           pids integer[] Process IDs of locking backends (more than one if
           multitransaction)

           pgrowlocks takes AccessShareLock for the target table and reads each
           row one by one to collect the row locking information. This is not very
           speedy for a large table. Note that:
            1. If an ACCESS EXCLUSIVE lock is taken on the table, pgrowlocks will
               be blocked.
            2. pgrowlocks is not guaranteed to produce a self-consistent snapshot.
               It is possible that a new row lock is taken, or an old lock is
               freed, during its execution.

           pgrowlocks does not show the contents of locked rows. If you want to
           take a look at the row contents at the same time, you could do
           something like this:
        SELECT * FROM accounts AS a, pgrowlocks('accounts') AS p
          WHERE p.locked_row = a.ctid;

           Be aware however that such a query will be very inefficient.

        F.28.2. Sample Output

        =# SELECT * FROM pgrowlocks('t1');
         locked_row | locker | multi | xids  |     modes      |  pids
        ------------+--------+-------+-------+----------------+--------
         (0,1)      |    609 | f     | {609} | {"For Share"}  | {3161}
         (0,2)      |    609 | f     | {609} | {"For Share"}  | {3161}
         (0,3)      |    607 | f     | {607} | {"For Update"} | {3107}
         (0,4)      |    607 | f     | {607} | {"For Update"} | {3107}
        (4 rows)

        F.28.3. Author

           Tatsuo Ishii
             __________________________________________________________________

           [11]Prev           [12]Up                   [13]Next
           F.27. pg_prewarm  [14]Home  F.29. pg_stat_statements


        ```
pgVersions:
- '16'
- '15'
- '14'
- '13'
