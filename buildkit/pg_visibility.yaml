---
apiVersion: v1
name: pg_visibility
repository: https://github.com/postgres/postgres
description: examine the visibility map (VM) and page-level visibility info
license: PostgreSQL
arch:
- amd64
- arm64
maintainers:
- name: Jonathan Dance
  email: jd@hydra.so
- name: Owen Ou
  email: o@hydra.so
build:
  main:
  - name: Build pg_visibility
    run: |
      cd contrib/pg_visibility
      make
      DESTDIR=${DESTDIR} make install
overrides:
  pgVersions:
    '16':
      source: https://ftp.postgresql.org/pub/source/v16.1/postgresql-16.1.tar.gz
      version: 16.1.0
      homepage: https://www.postgresql.org/docs/16/pgvisibility.html
      readme: |
        For formatted documentation, please see https://www.postgresql.org/docs/16/pgvisibility.html.

        ```
           #[1]F.35. pg_trgm -- support for similarity of text using trigram
           matching [2]F.37. pg_walinspect -- low-level WAL inspection

           F.36. pg_visibility -- visibility map information and utilities
           [3]Prev  [4]Up Appendix F. Additional Supplied Modules and Extensions
           [5]Home  [6]Next
             __________________________________________________________________

        F.36. pg_visibility -- visibility map information and utilities [7]#

           [8]F.36.1. Functions
           [9]F.36.2. Author

           The pg_visibility module provides a means for examining the visibility
           map (VM) and page-level visibility information of a table. It also
           provides functions to check the integrity of a visibility map and to
           force it to be rebuilt.

           Three different bits are used to store information about page-level
           visibility. The all-visible bit in the visibility map indicates that
           every tuple in the corresponding page of the relation is visible to
           every current and future transaction. The all-frozen bit in the
           visibility map indicates that every tuple in the page is frozen; that
           is, no future vacuum will need to modify the page until such time as a
           tuple is inserted, updated, deleted, or locked on that page. The page
           header's PD_ALL_VISIBLE bit has the same meaning as the all-visible bit
           in the visibility map, but is stored within the data page itself rather
           than in a separate data structure. These two bits will normally agree,
           but the page's all-visible bit can sometimes be set while the
           visibility map bit is clear after a crash recovery. The reported values
           can also disagree because of a change that occurs after pg_visibility
           examines the visibility map and before it examines the data page. Any
           event that causes data corruption can also cause these bits to
           disagree.

           Functions that display information about PD_ALL_VISIBLE bits are much
           more costly than those that only consult the visibility map, because
           they must read the relation's data blocks rather than only the (much
           smaller) visibility map. Functions that check the relation's data
           blocks are similarly expensive.

        F.36.1. Functions [10]#

           pg_visibility_map(relation regclass, blkno bigint, all_visible OUT
                  boolean, all_frozen OUT boolean) returns record
                  Returns the all-visible and all-frozen bits in the visibility
                  map for the given block of the given relation.

           pg_visibility(relation regclass, blkno bigint, all_visible OUT boolean,
                  all_frozen OUT boolean, pd_all_visible OUT boolean) returns
                  record
                  Returns the all-visible and all-frozen bits in the visibility
                  map for the given block of the given relation, plus the
                  PD_ALL_VISIBLE bit of that block.

           pg_visibility_map(relation regclass, blkno OUT bigint, all_visible OUT
                  boolean, all_frozen OUT boolean) returns setof record
                  Returns the all-visible and all-frozen bits in the visibility
                  map for each block of the given relation.

           pg_visibility(relation regclass, blkno OUT bigint, all_visible OUT
                  boolean, all_frozen OUT boolean, pd_all_visible OUT boolean)
                  returns setof record
                  Returns the all-visible and all-frozen bits in the visibility
                  map for each block of the given relation, plus the
                  PD_ALL_VISIBLE bit of each block.

           pg_visibility_map_summary(relation regclass, all_visible OUT bigint,
                  all_frozen OUT bigint) returns record
                  Returns the number of all-visible pages and the number of
                  all-frozen pages in the relation according to the visibility
                  map.

           pg_check_frozen(relation regclass, t_ctid OUT tid) returns setof tid
                  Returns the TIDs of non-frozen tuples stored in pages marked
                  all-frozen in the visibility map. If this function returns a
                  non-empty set of TIDs, the visibility map is corrupt.

           pg_check_visible(relation regclass, t_ctid OUT tid) returns setof tid
                  Returns the TIDs of non-all-visible tuples stored in pages
                  marked all-visible in the visibility map. If this function
                  returns a non-empty set of TIDs, the visibility map is corrupt.

           pg_truncate_visibility_map(relation regclass) returns void
                  Truncates the visibility map for the given relation. This
                  function is useful if you believe that the visibility map for
                  the relation is corrupt and wish to force rebuilding it. The
                  first VACUUM executed on the given relation after this function
                  is executed will scan every page in the relation and rebuild the
                  visibility map. (Until that is done, queries will treat the
                  visibility map as containing all zeroes.)

           By default, these functions are executable only by superusers and roles
           with privileges of the pg_stat_scan_tables role, with the exception of
           pg_truncate_visibility_map(relation regclass) which can only be
           executed by superusers.

        F.36.2. Author [11]#

           Robert Haas <[12]rhaas@postgresql.org>
             __________________________________________________________________

           [13]Prev  [14]Up  [15]Next
           F.35. pg_trgm -- support for similarity of text using trigram matching
           [16]Home  F.37. pg_walinspect -- low-level WAL inspection


        ```
    '15':
      source: https://ftp.postgresql.org/pub/source/v15.5/postgresql-15.5.tar.gz
      version: 15.5.0
      homepage: https://www.postgresql.org/docs/15/pgvisibility.html
      readme: |
        For formatted documentation, please see https://www.postgresql.org/docs/15/pgvisibility.html.

        ```
           #[1]F.35. pg_trgm [2]F.37. pg_walinspect

                                    F.36. pg_visibility
           [3]Prev  [4]Up Appendix F. Additional Supplied Modules [5]Home  [6]Next
             __________________________________________________________________

        F.36. pg_visibility

           [7]F.36.1. Functions
           [8]F.36.2. Author

           The pg_visibility module provides a means for examining the visibility
           map (VM) and page-level visibility information of a table. It also
           provides functions to check the integrity of a visibility map and to
           force it to be rebuilt.

           Three different bits are used to store information about page-level
           visibility. The all-visible bit in the visibility map indicates that
           every tuple in the corresponding page of the relation is visible to
           every current and future transaction. The all-frozen bit in the
           visibility map indicates that every tuple in the page is frozen; that
           is, no future vacuum will need to modify the page until such time as a
           tuple is inserted, updated, deleted, or locked on that page. The page
           header's PD_ALL_VISIBLE bit has the same meaning as the all-visible bit
           in the visibility map, but is stored within the data page itself rather
           than in a separate data structure. These two bits will normally agree,
           but the page's all-visible bit can sometimes be set while the
           visibility map bit is clear after a crash recovery. The reported values
           can also disagree because of a change that occurs after pg_visibility
           examines the visibility map and before it examines the data page. Any
           event that causes data corruption can also cause these bits to
           disagree.

           Functions that display information about PD_ALL_VISIBLE bits are much
           more costly than those that only consult the visibility map, because
           they must read the relation's data blocks rather than only the (much
           smaller) visibility map. Functions that check the relation's data
           blocks are similarly expensive.

        F.36.1. Functions

           pg_visibility_map(relation regclass, blkno bigint, all_visible OUT
                  boolean, all_frozen OUT boolean) returns record
                  Returns the all-visible and all-frozen bits in the visibility
                  map for the given block of the given relation.

           pg_visibility(relation regclass, blkno bigint, all_visible OUT boolean,
                  all_frozen OUT boolean, pd_all_visible OUT boolean) returns
                  record
                  Returns the all-visible and all-frozen bits in the visibility
                  map for the given block of the given relation, plus the
                  PD_ALL_VISIBLE bit of that block.

           pg_visibility_map(relation regclass, blkno OUT bigint, all_visible OUT
                  boolean, all_frozen OUT boolean) returns setof record
                  Returns the all-visible and all-frozen bits in the visibility
                  map for each block of the given relation.

           pg_visibility(relation regclass, blkno OUT bigint, all_visible OUT
                  boolean, all_frozen OUT boolean, pd_all_visible OUT boolean)
                  returns setof record
                  Returns the all-visible and all-frozen bits in the visibility
                  map for each block of the given relation, plus the
                  PD_ALL_VISIBLE bit of each block.

           pg_visibility_map_summary(relation regclass, all_visible OUT bigint,
                  all_frozen OUT bigint) returns record
                  Returns the number of all-visible pages and the number of
                  all-frozen pages in the relation according to the visibility
                  map.

           pg_check_frozen(relation regclass, t_ctid OUT tid) returns setof tid
                  Returns the TIDs of non-frozen tuples stored in pages marked
                  all-frozen in the visibility map. If this function returns a
                  non-empty set of TIDs, the visibility map is corrupt.

           pg_check_visible(relation regclass, t_ctid OUT tid) returns setof tid
                  Returns the TIDs of non-all-visible tuples stored in pages
                  marked all-visible in the visibility map. If this function
                  returns a non-empty set of TIDs, the visibility map is corrupt.

           pg_truncate_visibility_map(relation regclass) returns void
                  Truncates the visibility map for the given relation. This
                  function is useful if you believe that the visibility map for
                  the relation is corrupt and wish to force rebuilding it. The
                  first VACUUM executed on the given relation after this function
                  is executed will scan every page in the relation and rebuild the
                  visibility map. (Until that is done, queries will treat the
                  visibility map as containing all zeroes.)

           By default, these functions are executable only by superusers and roles
           with privileges of the pg_stat_scan_tables role, with the exception of
           pg_truncate_visibility_map(relation regclass) which can only be
           executed by superusers.

        F.36.2. Author

           Robert Haas <[9]rhaas@postgresql.org>
             __________________________________________________________________

           [10]Prev        [11]Up              [12]Next
           F.35. pg_trgm  [13]Home  F.37. pg_walinspect


        ```
    '14':
      source: https://ftp.postgresql.org/pub/source/v14.10/postgresql-14.10.tar.gz
      version: 14.10.0
      homepage: https://www.postgresql.org/docs/14/pgvisibility.html
      readme: |
        For formatted documentation, please see https://www.postgresql.org/docs/14/pgvisibility.html.

        ```
           #[1]F.33. pg_trgm [2]F.35. postgres_fdw

                                    F.34. pg_visibility
           [3]Prev  [4]Up Appendix F. Additional Supplied Modules [5]Home  [6]Next
             __________________________________________________________________

        F.34. pg_visibility

           [7]F.34.1. Functions
           [8]F.34.2. Author

           The pg_visibility module provides a means for examining the visibility
           map (VM) and page-level visibility information of a table. It also
           provides functions to check the integrity of a visibility map and to
           force it to be rebuilt.

           Three different bits are used to store information about page-level
           visibility. The all-visible bit in the visibility map indicates that
           every tuple in the corresponding page of the relation is visible to
           every current and future transaction. The all-frozen bit in the
           visibility map indicates that every tuple in the page is frozen; that
           is, no future vacuum will need to modify the page until such time as a
           tuple is inserted, updated, deleted, or locked on that page. The page
           header's PD_ALL_VISIBLE bit has the same meaning as the all-visible bit
           in the visibility map, but is stored within the data page itself rather
           than in a separate data structure. These two bits will normally agree,
           but the page's all-visible bit can sometimes be set while the
           visibility map bit is clear after a crash recovery. The reported values
           can also disagree because of a change that occurs after pg_visibility
           examines the visibility map and before it examines the data page. Any
           event that causes data corruption can also cause these bits to
           disagree.

           Functions that display information about PD_ALL_VISIBLE bits are much
           more costly than those that only consult the visibility map, because
           they must read the relation's data blocks rather than only the (much
           smaller) visibility map. Functions that check the relation's data
           blocks are similarly expensive.

        F.34.1. Functions

           pg_visibility_map(relation regclass, blkno bigint, all_visible OUT
                  boolean, all_frozen OUT boolean) returns record
                  Returns the all-visible and all-frozen bits in the visibility
                  map for the given block of the given relation.

           pg_visibility(relation regclass, blkno bigint, all_visible OUT boolean,
                  all_frozen OUT boolean, pd_all_visible OUT boolean) returns
                  record
                  Returns the all-visible and all-frozen bits in the visibility
                  map for the given block of the given relation, plus the
                  PD_ALL_VISIBLE bit of that block.

           pg_visibility_map(relation regclass, blkno OUT bigint, all_visible OUT
                  boolean, all_frozen OUT boolean) returns setof record
                  Returns the all-visible and all-frozen bits in the visibility
                  map for each block of the given relation.

           pg_visibility(relation regclass, blkno OUT bigint, all_visible OUT
                  boolean, all_frozen OUT boolean, pd_all_visible OUT boolean)
                  returns setof record
                  Returns the all-visible and all-frozen bits in the visibility
                  map for each block of the given relation, plus the
                  PD_ALL_VISIBLE bit of each block.

           pg_visibility_map_summary(relation regclass, all_visible OUT bigint,
                  all_frozen OUT bigint) returns record
                  Returns the number of all-visible pages and the number of
                  all-frozen pages in the relation according to the visibility
                  map.

           pg_check_frozen(relation regclass, t_ctid OUT tid) returns setof tid
                  Returns the TIDs of non-frozen tuples stored in pages marked
                  all-frozen in the visibility map. If this function returns a
                  non-empty set of TIDs, the visibility map is corrupt.

           pg_check_visible(relation regclass, t_ctid OUT tid) returns setof tid
                  Returns the TIDs of non-all-visible tuples stored in pages
                  marked all-visible in the visibility map. If this function
                  returns a non-empty set of TIDs, the visibility map is corrupt.

           pg_truncate_visibility_map(relation regclass) returns void
                  Truncates the visibility map for the given relation. This
                  function is useful if you believe that the visibility map for
                  the relation is corrupt and wish to force rebuilding it. The
                  first VACUUM executed on the given relation after this function
                  is executed will scan every page in the relation and rebuild the
                  visibility map. (Until that is done, queries will treat the
                  visibility map as containing all zeroes.)

           By default, these functions are executable only by superusers and
           members of the pg_stat_scan_tables role, with the exception of
           pg_truncate_visibility_map(relation regclass) which can only be
           executed by superusers.

        F.34.2. Author

           Robert Haas <[9]rhaas@postgresql.org>
             __________________________________________________________________

           [10]Prev        [11]Up             [12]Next
           F.33. pg_trgm  [13]Home  F.35. postgres_fdw


        ```
    '13':
      source: https://ftp.postgresql.org/pub/source/v13.13/postgresql-13.13.tar.gz
      version: 13.13.0
      homepage: https://www.postgresql.org/docs/13/pgvisibility.html
      readme: |
        For formatted documentation, please see https://www.postgresql.org/docs/13/pgvisibility.html.

        ```
           #[1]F.31. pg_trgm [2]F.33. postgres_fdw

                                    F.32. pg_visibility
           [3]Prev  [4]Up Appendix F. Additional Supplied Modules [5]Home  [6]Next
             __________________________________________________________________

        F.32. pg_visibility

           [7]F.32.1. Functions
           [8]F.32.2. Author

           The pg_visibility module provides a means for examining the visibility
           map (VM) and page-level visibility information of a table. It also
           provides functions to check the integrity of a visibility map and to
           force it to be rebuilt.

           Three different bits are used to store information about page-level
           visibility. The all-visible bit in the visibility map indicates that
           every tuple in the corresponding page of the relation is visible to
           every current and future transaction. The all-frozen bit in the
           visibility map indicates that every tuple in the page is frozen; that
           is, no future vacuum will need to modify the page until such time as a
           tuple is inserted, updated, deleted, or locked on that page. The page
           header's PD_ALL_VISIBLE bit has the same meaning as the all-visible bit
           in the visibility map, but is stored within the data page itself rather
           than in a separate data structure. These two bits will normally agree,
           but the page's all-visible bit can sometimes be set while the
           visibility map bit is clear after a crash recovery. The reported values
           can also disagree because of a change that occurs after pg_visibility
           examines the visibility map and before it examines the data page. Any
           event that causes data corruption can also cause these bits to
           disagree.

           Functions that display information about PD_ALL_VISIBLE bits are much
           more costly than those that only consult the visibility map, because
           they must read the relation's data blocks rather than only the (much
           smaller) visibility map. Functions that check the relation's data
           blocks are similarly expensive.

        F.32.1. Functions

           pg_visibility_map(relation regclass, blkno bigint, all_visible OUT
                  boolean, all_frozen OUT boolean) returns record
                  Returns the all-visible and all-frozen bits in the visibility
                  map for the given block of the given relation.

           pg_visibility(relation regclass, blkno bigint, all_visible OUT boolean,
                  all_frozen OUT boolean, pd_all_visible OUT boolean) returns
                  record
                  Returns the all-visible and all-frozen bits in the visibility
                  map for the given block of the given relation, plus the
                  PD_ALL_VISIBLE bit of that block.

           pg_visibility_map(relation regclass, blkno OUT bigint, all_visible OUT
                  boolean, all_frozen OUT boolean) returns setof record
                  Returns the all-visible and all-frozen bits in the visibility
                  map for each block of the given relation.

           pg_visibility(relation regclass, blkno OUT bigint, all_visible OUT
                  boolean, all_frozen OUT boolean, pd_all_visible OUT boolean)
                  returns setof record
                  Returns the all-visible and all-frozen bits in the visibility
                  map for each block of the given relation, plus the
                  PD_ALL_VISIBLE bit of each block.

           pg_visibility_map_summary(relation regclass, all_visible OUT bigint,
                  all_frozen OUT bigint) returns record
                  Returns the number of all-visible pages and the number of
                  all-frozen pages in the relation according to the visibility
                  map.

           pg_check_frozen(relation regclass, t_ctid OUT tid) returns setof tid
                  Returns the TIDs of non-frozen tuples stored in pages marked
                  all-frozen in the visibility map. If this function returns a
                  non-empty set of TIDs, the visibility map is corrupt.

           pg_check_visible(relation regclass, t_ctid OUT tid) returns setof tid
                  Returns the TIDs of non-all-visible tuples stored in pages
                  marked all-visible in the visibility map. If this function
                  returns a non-empty set of TIDs, the visibility map is corrupt.

           pg_truncate_visibility_map(relation regclass) returns void
                  Truncates the visibility map for the given relation. This
                  function is useful if you believe that the visibility map for
                  the relation is corrupt and wish to force rebuilding it. The
                  first VACUUM executed on the given relation after this function
                  is executed will scan every page in the relation and rebuild the
                  visibility map. (Until that is done, queries will treat the
                  visibility map as containing all zeroes.)

           By default, these functions are executable only by superusers and
           members of the pg_stat_scan_tables role, with the exception of
           pg_truncate_visibility_map(relation regclass) which can only be
           executed by superusers.

        F.32.2. Author

           Robert Haas <[9]rhaas@postgresql.org>
             __________________________________________________________________

           [10]Prev        [11]Up             [12]Next
           F.31. pg_trgm  [13]Home  F.33. postgres_fdw


        ```
pgVersions:
- '16'
- '15'
- '14'
- '13'
