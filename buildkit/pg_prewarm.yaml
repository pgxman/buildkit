---
apiVersion: v1
name: pg_prewarm
repository: https://github.com/postgres/postgres
description: prewarm relation data
license: PostgreSQL
arch:
- amd64
- arm64
maintainers:
- name: Jonathan Dance
  email: jd@hydra.so
- name: Owen Ou
  email: o@hydra.so
build:
  main:
  - name: Build pg_prewarm
    run: |
      cd contrib/pg_prewarm
      make
      DESTDIR=${DESTDIR} make install
overrides:
  pgVersions:
    '16':
      source: https://ftp.postgresql.org/pub/source/v16.1/postgresql-16.1.tar.gz
      version: 16.1.0
      homepage: https://www.postgresql.org/docs/16/pgprewarm.html
      readme: |
        For formatted documentation, please see https://www.postgresql.org/docs/16/pgprewarm.html.

        ```
           #[1]F.29. pg_freespacemap -- examine the free space map
           [2]F.31. pgrowlocks -- show a table's row locking information

           F.30. pg_prewarm -- preload relation data into buffer caches
           [3]Prev  [4]Up Appendix F. Additional Supplied Modules and Extensions
           [5]Home  [6]Next
             __________________________________________________________________

        F.30. pg_prewarm -- preload relation data into buffer caches [7]#

           [8]F.30.1. Functions
           [9]F.30.2. Configuration Parameters
           [10]F.30.3. Author

           The pg_prewarm module provides a convenient way to load relation data
           into either the operating system buffer cache or the PostgreSQL buffer
           cache. Prewarming can be performed manually using the pg_prewarm
           function, or can be performed automatically by including pg_prewarm in
           [11]shared_preload_libraries. In the latter case, the system will run a
           background worker which periodically records the contents of shared
           buffers in a file called autoprewarm.blocks and will, using 2
           background workers, reload those same blocks after a restart.

        F.30.1. Functions [12]#

        pg_prewarm(regclass, mode text default 'buffer', fork text default 'main',
                   first_block int8 default null,
                   last_block int8 default null) RETURNS int8

           The first argument is the relation to be prewarmed. The second argument
           is the prewarming method to be used, as further discussed below; the
           third is the relation fork to be prewarmed, usually main. The fourth
           argument is the first block number to prewarm (NULL is accepted as a
           synonym for zero). The fifth argument is the last block number to
           prewarm (NULL means prewarm through the last block in the relation).
           The return value is the number of blocks prewarmed.

           There are three available prewarming methods. prefetch issues
           asynchronous prefetch requests to the operating system, if this is
           supported, or throws an error otherwise. read reads the requested range
           of blocks; unlike prefetch, this is synchronous and supported on all
           platforms and builds, but may be slower. buffer reads the requested
           range of blocks into the database buffer cache.

           Note that with any of these methods, attempting to prewarm more blocks
           than can be cached -- by the OS when using prefetch or read, or by
           PostgreSQL when using buffer -- will likely result in lower-numbered
           blocks being evicted as higher numbered blocks are read in. Prewarmed
           data also enjoys no special protection from cache evictions, so it is
           possible that other system activity may evict the newly prewarmed
           blocks shortly after they are read; conversely, prewarming may also
           evict other data from cache. For these reasons, prewarming is typically
           most useful at startup, when caches are largely empty.
        autoprewarm_start_worker() RETURNS void

           Launch the main autoprewarm worker. This will normally happen
           automatically, but is useful if automatic prewarm was not configured at
           server startup time and you wish to start up the worker at a later
           time.
        autoprewarm_dump_now() RETURNS int8

           Update autoprewarm.blocks immediately. This may be useful if the
           autoprewarm worker is not running but you anticipate running it after
           the next restart. The return value is the number of records written to
           autoprewarm.blocks.

        F.30.2. Configuration Parameters [13]#

           pg_prewarm.autoprewarm (boolean)
                  Controls whether the server should run the autoprewarm worker.
                  This is on by default. This parameter can only be set at server
                  start.

           pg_prewarm.autoprewarm_interval (integer)
                  This is the interval between updates to autoprewarm.blocks. The
                  default is 300 seconds. If set to 0, the file will not be dumped
                  at regular intervals, but only when the server is shut down.

           These parameters must be set in postgresql.conf. Typical usage might
           be:
        # postgresql.conf
        shared_preload_libraries = 'pg_prewarm'

        pg_prewarm.autoprewarm = true
        pg_prewarm.autoprewarm_interval = 300s


        F.30.3. Author [14]#

           Robert Haas <[15]rhaas@postgresql.org>
             __________________________________________________________________

           [16]Prev                                              [17]Up   [18]Next
           F.29. pg_freespacemap -- examine the free space map  [19]Home
           F.31. pgrowlocks -- show a table's row locking information


        ```
    '15':
      source: https://ftp.postgresql.org/pub/source/v15.5/postgresql-15.5.tar.gz
      version: 15.5.0
      homepage: https://www.postgresql.org/docs/15/pgprewarm.html
      readme: |
        For formatted documentation, please see https://www.postgresql.org/docs/15/pgprewarm.html.

        ```
           #[1]F.29. pg_freespacemap [2]F.31. pgrowlocks

                                      F.30. pg_prewarm
           [3]Prev  [4]Up Appendix F. Additional Supplied Modules [5]Home  [6]Next
             __________________________________________________________________

        F.30. pg_prewarm

           [7]F.30.1. Functions
           [8]F.30.2. Configuration Parameters
           [9]F.30.3. Author

           The pg_prewarm module provides a convenient way to load relation data
           into either the operating system buffer cache or the PostgreSQL buffer
           cache. Prewarming can be performed manually using the pg_prewarm
           function, or can be performed automatically by including pg_prewarm in
           [10]shared_preload_libraries. In the latter case, the system will run a
           background worker which periodically records the contents of shared
           buffers in a file called autoprewarm.blocks and will, using 2
           background workers, reload those same blocks after a restart.

        F.30.1. Functions

        pg_prewarm(regclass, mode text default 'buffer', fork text default 'main',
                   first_block int8 default null,
                   last_block int8 default null) RETURNS int8

           The first argument is the relation to be prewarmed. The second argument
           is the prewarming method to be used, as further discussed below; the
           third is the relation fork to be prewarmed, usually main. The fourth
           argument is the first block number to prewarm (NULL is accepted as a
           synonym for zero). The fifth argument is the last block number to
           prewarm (NULL means prewarm through the last block in the relation).
           The return value is the number of blocks prewarmed.

           There are three available prewarming methods. prefetch issues
           asynchronous prefetch requests to the operating system, if this is
           supported, or throws an error otherwise. read reads the requested range
           of blocks; unlike prefetch, this is synchronous and supported on all
           platforms and builds, but may be slower. buffer reads the requested
           range of blocks into the database buffer cache.

           Note that with any of these methods, attempting to prewarm more blocks
           than can be cached -- by the OS when using prefetch or read, or by
           PostgreSQL when using buffer -- will likely result in lower-numbered
           blocks being evicted as higher numbered blocks are read in. Prewarmed
           data also enjoys no special protection from cache evictions, so it is
           possible that other system activity may evict the newly prewarmed
           blocks shortly after they are read; conversely, prewarming may also
           evict other data from cache. For these reasons, prewarming is typically
           most useful at startup, when caches are largely empty.
        autoprewarm_start_worker() RETURNS void

           Launch the main autoprewarm worker. This will normally happen
           automatically, but is useful if automatic prewarm was not configured at
           server startup time and you wish to start up the worker at a later
           time.
        autoprewarm_dump_now() RETURNS int8

           Update autoprewarm.blocks immediately. This may be useful if the
           autoprewarm worker is not running but you anticipate running it after
           the next restart. The return value is the number of records written to
           autoprewarm.blocks.

        F.30.2. Configuration Parameters

           pg_prewarm.autoprewarm (boolean)
                  Controls whether the server should run the autoprewarm worker.
                  This is on by default. This parameter can only be set at server
                  start.

           pg_prewarm.autoprewarm_interval (integer)
                  This is the interval between updates to autoprewarm.blocks. The
                  default is 300 seconds. If set to 0, the file will not be dumped
                  at regular intervals, but only when the server is shut down.

           These parameters must be set in postgresql.conf. Typical usage might
           be:
        # postgresql.conf
        shared_preload_libraries = 'pg_prewarm'

        pg_prewarm.autoprewarm = true
        pg_prewarm.autoprewarm_interval = 300s


        F.30.3. Author

           Robert Haas <[11]rhaas@postgresql.org>
             __________________________________________________________________

           [12]Prev                [13]Up           [14]Next
           F.29. pg_freespacemap  [15]Home  F.31. pgrowlocks


        ```
    '14':
      source: https://ftp.postgresql.org/pub/source/v14.10/postgresql-14.10.tar.gz
      version: 14.10.0
      homepage: https://www.postgresql.org/docs/14/pgprewarm.html
      readme: |
        For formatted documentation, please see https://www.postgresql.org/docs/14/pgprewarm.html.

        ```
           #[1]F.27. pg_freespacemap [2]F.29. pgrowlocks

                                      F.28. pg_prewarm
           [3]Prev  [4]Up Appendix F. Additional Supplied Modules [5]Home  [6]Next
             __________________________________________________________________

        F.28. pg_prewarm

           [7]F.28.1. Functions
           [8]F.28.2. Configuration Parameters
           [9]F.28.3. Author

           The pg_prewarm module provides a convenient way to load relation data
           into either the operating system buffer cache or the PostgreSQL buffer
           cache. Prewarming can be performed manually using the pg_prewarm
           function, or can be performed automatically by including pg_prewarm in
           [10]shared_preload_libraries. In the latter case, the system will run a
           background worker which periodically records the contents of shared
           buffers in a file called autoprewarm.blocks and will, using 2
           background workers, reload those same blocks after a restart.

        F.28.1. Functions

        pg_prewarm(regclass, mode text default 'buffer', fork text default 'main',
                   first_block int8 default null,
                   last_block int8 default null) RETURNS int8

           The first argument is the relation to be prewarmed. The second argument
           is the prewarming method to be used, as further discussed below; the
           third is the relation fork to be prewarmed, usually main. The fourth
           argument is the first block number to prewarm (NULL is accepted as a
           synonym for zero). The fifth argument is the last block number to
           prewarm (NULL means prewarm through the last block in the relation).
           The return value is the number of blocks prewarmed.

           There are three available prewarming methods. prefetch issues
           asynchronous prefetch requests to the operating system, if this is
           supported, or throws an error otherwise. read reads the requested range
           of blocks; unlike prefetch, this is synchronous and supported on all
           platforms and builds, but may be slower. buffer reads the requested
           range of blocks into the database buffer cache.

           Note that with any of these methods, attempting to prewarm more blocks
           than can be cached -- by the OS when using prefetch or read, or by
           PostgreSQL when using buffer -- will likely result in lower-numbered
           blocks being evicted as higher numbered blocks are read in. Prewarmed
           data also enjoys no special protection from cache evictions, so it is
           possible that other system activity may evict the newly prewarmed
           blocks shortly after they are read; conversely, prewarming may also
           evict other data from cache. For these reasons, prewarming is typically
           most useful at startup, when caches are largely empty.
        autoprewarm_start_worker() RETURNS void

           Launch the main autoprewarm worker. This will normally happen
           automatically, but is useful if automatic prewarm was not configured at
           server startup time and you wish to start up the worker at a later
           time.
        autoprewarm_dump_now() RETURNS int8

           Update autoprewarm.blocks immediately. This may be useful if the
           autoprewarm worker is not running but you anticipate running it after
           the next restart. The return value is the number of records written to
           autoprewarm.blocks.

        F.28.2. Configuration Parameters

           pg_prewarm.autoprewarm (boolean)
                  Controls whether the server should run the autoprewarm worker.
                  This is on by default. This parameter can only be set at server
                  start.

           pg_prewarm.autoprewarm_interval (int)
                  This is the interval between updates to autoprewarm.blocks. The
                  default is 300 seconds. If set to 0, the file will not be dumped
                  at regular intervals, but only when the server is shut down.

           These parameters must be set in postgresql.conf. Typical usage might
           be:
        # postgresql.conf
        shared_preload_libraries = 'pg_prewarm'

        pg_prewarm.autoprewarm = true
        pg_prewarm.autoprewarm_interval = 300s


        F.28.3. Author

           Robert Haas <[11]rhaas@postgresql.org>
             __________________________________________________________________

           [12]Prev                [13]Up           [14]Next
           F.27. pg_freespacemap  [15]Home  F.29. pgrowlocks


        ```
    '13':
      source: https://ftp.postgresql.org/pub/source/v13.13/postgresql-13.13.tar.gz
      version: 13.13.0
      homepage: https://www.postgresql.org/docs/13/pgprewarm.html
      readme: |
        For formatted documentation, please see https://www.postgresql.org/docs/13/pgprewarm.html.

        ```
           #[1]F.26. pg_freespacemap [2]F.28. pgrowlocks

                                      F.27. pg_prewarm
           [3]Prev  [4]Up Appendix F. Additional Supplied Modules [5]Home  [6]Next
             __________________________________________________________________

        F.27. pg_prewarm

           [7]F.27.1. Functions
           [8]F.27.2. Configuration Parameters
           [9]F.27.3. Author

           The pg_prewarm module provides a convenient way to load relation data
           into either the operating system buffer cache or the PostgreSQL buffer
           cache. Prewarming can be performed manually using the pg_prewarm
           function, or can be performed automatically by including pg_prewarm in
           [10]shared_preload_libraries. In the latter case, the system will run a
           background worker which periodically records the contents of shared
           buffers in a file called autoprewarm.blocks and will, using 2
           background workers, reload those same blocks after a restart.

        F.27.1. Functions

        pg_prewarm(regclass, mode text default 'buffer', fork text default 'main',
                   first_block int8 default null,
                   last_block int8 default null) RETURNS int8

           The first argument is the relation to be prewarmed. The second argument
           is the prewarming method to be used, as further discussed below; the
           third is the relation fork to be prewarmed, usually main. The fourth
           argument is the first block number to prewarm (NULL is accepted as a
           synonym for zero). The fifth argument is the last block number to
           prewarm (NULL means prewarm through the last block in the relation).
           The return value is the number of blocks prewarmed.

           There are three available prewarming methods. prefetch issues
           asynchronous prefetch requests to the operating system, if this is
           supported, or throws an error otherwise. read reads the requested range
           of blocks; unlike prefetch, this is synchronous and supported on all
           platforms and builds, but may be slower. buffer reads the requested
           range of blocks into the database buffer cache.

           Note that with any of these methods, attempting to prewarm more blocks
           than can be cached -- by the OS when using prefetch or read, or by
           PostgreSQL when using buffer -- will likely result in lower-numbered
           blocks being evicted as higher numbered blocks are read in. Prewarmed
           data also enjoys no special protection from cache evictions, so it is
           possible that other system activity may evict the newly prewarmed
           blocks shortly after they are read; conversely, prewarming may also
           evict other data from cache. For these reasons, prewarming is typically
           most useful at startup, when caches are largely empty.
        autoprewarm_start_worker() RETURNS void

           Launch the main autoprewarm worker. This will normally happen
           automatically, but is useful if automatic prewarm was not configured at
           server startup time and you wish to start up the worker at a later
           time.
        autoprewarm_dump_now() RETURNS int8

           Update autoprewarm.blocks immediately. This may be useful if the
           autoprewarm worker is not running but you anticipate running it after
           the next restart. The return value is the number of records written to
           autoprewarm.blocks.

        F.27.2. Configuration Parameters

           pg_prewarm.autoprewarm (boolean)
                  Controls whether the server should run the autoprewarm worker.
                  This is on by default. This parameter can only be set at server
                  start.

           pg_prewarm.autoprewarm_interval (int)
                  This is the interval between updates to autoprewarm.blocks. The
                  default is 300 seconds. If set to 0, the file will not be dumped
                  at regular intervals, but only when the server is shut down.

           These parameters must be set in postgresql.conf. Typical usage might
           be:
        # postgresql.conf
        shared_preload_libraries = 'pg_prewarm'

        pg_prewarm.autoprewarm = true
        pg_prewarm.autoprewarm_interval = 300s


        F.27.3. Author

           Robert Haas <[11]rhaas@postgresql.org>
             __________________________________________________________________

           [12]Prev                [13]Up           [14]Next
           F.26. pg_freespacemap  [15]Home  F.28. pgrowlocks


        ```
pgVersions:
- '16'
- '15'
- '14'
- '13'
