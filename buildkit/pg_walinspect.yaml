---
apiVersion: v1
name: pg_walinspect
repository: https://github.com/postgres/postgres
description: functions to inspect contents of PostgreSQL Write-Ahead Log
license: PostgreSQL
arch:
- amd64
- arm64
maintainers:
- name: Jonathan Dance
  email: jd@hydra.so
- name: Owen Ou
  email: o@hydra.so
build:
  main:
  - name: Build pg_walinspect
    run: |
      cd contrib/pg_walinspect
      make
      DESTDIR=${DESTDIR} make install
overrides:
  pgVersions:
    '16':
      source: https://ftp.postgresql.org/pub/source/v16.1/postgresql-16.1.tar.gz
      version: 16.1.0
      homepage: https://www.postgresql.org/docs/16/pgwalinspect.html
      readme: |
        For formatted documentation, please see https://www.postgresql.org/docs/16/pgwalinspect.html.

        ```
           #[1]F.36. pg_visibility -- visibility map information and utilities
           [2]F.38. postgres_fdw -- access data stored in external PostgreSQL
           servers

           F.37. pg_walinspect -- low-level WAL inspection
           [3]Prev  [4]Up Appendix F. Additional Supplied Modules and Extensions
           [5]Home  [6]Next
             __________________________________________________________________

        F.37. pg_walinspect -- low-level WAL inspection [7]#

           [8]F.37.1. General Functions
           [9]F.37.2. Author

           The pg_walinspect module provides SQL functions that allow you to
           inspect the contents of write-ahead log of a running PostgreSQL
           database cluster at a low level, which is useful for debugging,
           analytical, reporting or educational purposes. It is similar to
           [10]pg_waldump, but accessible through SQL rather than a separate
           utility.

           All the functions of this module will provide the WAL information using
           the server's current timeline ID.

        Note

           The pg_walinspect functions are often called using an LSN argument that
           specifies the location at which a known WAL record of interest begins.
           However, some functions, such as [11]pg_logical_emit_message, return
           the LSN after the record that was just inserted.

        Tip

           All of the pg_walinspect functions that show information about records
           that fall within a certain LSN range are permissive about accepting
           end_lsn arguments that are after the server's current LSN. Using an
           end_lsn "from the future" will not raise an error.

           It may be convenient to provide the value FFFFFFFF/FFFFFFFF (the
           maximum valid pg_lsn value) as an end_lsn argument. This is equivalent
           to providing an end_lsn argument matching the server's current LSN.

           By default, use of these functions is restricted to superusers and
           members of the pg_read_server_files role. Access may be granted by
           superusers to others using GRANT.

        F.37.1. General Functions [12]#

           pg_get_wal_record_info(in_lsn pg_lsn) returns record [13]#
                  Gets WAL record information about a record that is located at or
                  after the in_lsn argument. For example:

        postgres=# SELECT * FROM pg_get_wal_record_info('0/E419E28');
        -[ RECORD 1 ]----+-------------------------------------------------
        start_lsn        | 0/E419E28
        end_lsn          | 0/E419E68
        prev_lsn         | 0/E419D78
        xid              | 0
        resource_manager | Heap2
        record_type      | VACUUM
        record_length    | 58
        main_data_length | 2
        fpi_length       | 0
        description      | nunused: 5, unused: [1, 2, 3, 4, 5]
        block_ref        | blkref #0: rel 1663/16385/1249 fork main blk 364

                  If in_lsn isn't at the start of a WAL record, information about
                  the next valid WAL record is shown instead. If there is no next
                  valid WAL record, the function raises an error.

           pg_get_wal_records_info(start_lsn pg_lsn, end_lsn pg_lsn) returns setof
                  record [14]#
                  Gets information of all the valid WAL records between start_lsn
                  and end_lsn. Returns one row per WAL record. For example:

        postgres=# SELECT * FROM pg_get_wal_records_info('0/1E913618', '0/1E913740') LIM
        IT 1;
        -[ RECORD 1 ]----+--------------------------------------------------------------
        start_lsn        | 0/1E913618
        end_lsn          | 0/1E913650
        prev_lsn         | 0/1E9135A0
        xid              | 0
        resource_manager | Standby
        record_type      | RUNNING_XACTS
        record_length    | 50
        main_data_length | 24
        fpi_length       | 0
        description      | nextXid 33775 latestCompletedXid 33774 oldestRunningXid 33775
        block_ref        |

                  The function raises an error if start_lsn is not available.

           pg_get_wal_block_info(start_lsn pg_lsn, end_lsn pg_lsn, show_data
                  boolean DEFAULT true) returns setof record [15]#
                  Gets information about each block reference from all the valid
                  WAL records between start_lsn and end_lsn with one or more block
                  references. Returns one row per block reference per WAL record.
                  For example:

        postgres=# SELECT * FROM pg_get_wal_block_info('0/1230278', '0/12302B8');
        -[ RECORD 1 ]-----+-----------------------------------
        start_lsn         | 0/1230278
        end_lsn           | 0/12302B8
        prev_lsn          | 0/122FD40
        block_id          | 0
        reltablespace     | 1663
        reldatabase       | 1
        relfilenode       | 2658
        relforknumber     | 0
        relblocknumber    | 11
        xid               | 341
        resource_manager  | Btree
        record_type       | INSERT_LEAF
        record_length     | 64
        main_data_length  | 2
        block_data_length | 16
        block_fpi_length  | 0
        block_fpi_info    |
        description       | off: 46
        block_data        | \x00002a00070010402630000070696400
        block_fpi_data    |

                  This example involves a WAL record that only contains one block
                  reference, but many WAL records contain several block
                  references. Rows output by pg_get_wal_block_info are guaranteed
                  to have a unique combination of start_lsn and block_id values.

                  Much of the information shown here matches the output that
                  pg_get_wal_records_info would show, given the same arguments.
                  However, pg_get_wal_block_info unnests the information from each
                  WAL record into an expanded form by outputting one row per block
                  reference, so certain details are tracked at the block reference
                  level rather than at the whole-record level. This structure is
                  useful with queries that track how individual blocks changed
                  over time. Note that records with no block references (e.g.,
                  COMMIT WAL records) will have no rows returned, so
                  pg_get_wal_block_info may actually return fewer rows than
                  pg_get_wal_records_info.

                  The reltablespace, reldatabase, and relfilenode parameters
                  reference [16]pg_tablespace.oid, [17]pg_database.oid, and
                  [18]pg_class.relfilenode respectively. The relforknumber field
                  is the fork number within the relation for the block reference;
                  see common/relpath.h for details.

        Tip

                  The pg_filenode_relation function (see [19]Table 9.97) can help
                  you to determine which relation was modified during original
                  execution.

                  It is possible for clients to avoid the overhead of
                  materializing block data. This may make function execution
                  significantly faster. When show_data is set to false, block_data
                  and block_fpi_data values are omitted (that is, the block_data
                  and block_fpi_data OUT arguments are NULL for all rows
                  returned). Obviously, this optimization is only feasible with
                  queries where block data isn't truly required.

                  The function raises an error if start_lsn is not available.

           pg_get_wal_stats(start_lsn pg_lsn, end_lsn pg_lsn, per_record boolean
                  DEFAULT false) returns setof record [20]#
                  Gets statistics of all the valid WAL records between start_lsn
                  and end_lsn. By default, it returns one row per resource_manager
                  type. When per_record is set to true, it returns one row per
                  record_type. For example:

        postgres=# SELECT * FROM pg_get_wal_stats('0/1E847D00', '0/1E84F500')
                   WHERE count > 0 AND
                         "resource_manager/record_type" = 'Transaction'
                   LIMIT 1;
        -[ RECORD 1 ]----------------+-------------------
        resource_manager/record_type | Transaction
        count                        | 2
        count_percentage             | 8
        record_size                  | 875
        record_size_percentage       | 41.23468426013195
        fpi_size                     | 0
        fpi_size_percentage          | 0
        combined_size                | 875
        combined_size_percentage     | 2.8634072910530795

                  The function raises an error if start_lsn is not available.

        F.37.2. Author [21]#

           Bharath Rupireddy <[22]bharath.rupireddyforpostgres@gmail.com>
             __________________________________________________________________

           [23]Prev  [24]Up  [25]Next
           F.36. pg_visibility -- visibility map information and utilities
           [26]Home  F.38. postgres_fdw -- access data stored in external
           PostgreSQL servers


        ```
    '15':
      source: https://ftp.postgresql.org/pub/source/v15.5/postgresql-15.5.tar.gz
      version: 15.5.0
      homepage: https://www.postgresql.org/docs/15/pgwalinspect.html
      readme: |
        For formatted documentation, please see https://www.postgresql.org/docs/15/pgwalinspect.html.

        ```
           #[1]F.36. pg_visibility [2]F.38. postgres_fdw

                                    F.37. pg_walinspect
           [3]Prev  [4]Up Appendix F. Additional Supplied Modules [5]Home  [6]Next
             __________________________________________________________________

        F.37. pg_walinspect

           [7]F.37.1. General Functions
           [8]F.37.2. Author

           The pg_walinspect module provides SQL functions that allow you to
           inspect the contents of write-ahead log of a running PostgreSQL
           database cluster at a low level, which is useful for debugging,
           analytical, reporting or educational purposes. It is similar to
           [9]pg_waldump, but accessible through SQL rather than a separate
           utility.

           All the functions of this module will provide the WAL information using
           the current server's timeline ID.

           All the functions of this module will try to find the first valid WAL
           record that is at or after the given in_lsn or start_lsn and will emit
           error if no such record is available. Similarly, the end_lsn must be
           available, and if it falls in the middle of a record, the entire record
           must be available.

        Note

           Some functions, such as [10]pg_logical_emit_message, return the LSN
           after the record just inserted. Therefore, if you pass that LSN as
           in_lsn or start_lsn to one of these functions, it will return the next
           record.

           By default, use of these functions is restricted to superusers and
           members of the pg_read_server_files role. Access may be granted by
           superusers to others using GRANT.

        F.37.1. General Functions

           pg_get_wal_record_info(in_lsn pg_lsn) returns record
                  Gets WAL record information of a given LSN. If the given LSN
                  isn't at the start of a WAL record, it gives the information of
                  the next available valid WAL record; or an error if no such
                  record is found. For example, usage of the function is as
                  follows:

        postgres=# SELECT * FROM pg_get_wal_record_info('0/1E826E98');
        -[ RECORD 1 ]----+----------------------------------------------------
        start_lsn        | 0/1E826F20
        end_lsn          | 0/1E826F60
        prev_lsn         | 0/1E826C80
        xid              | 0
        resource_manager | Heap2
        record_type      | PRUNE
        record_length    | 58
        main_data_length | 8
        fpi_length       | 0
        description      | snapshotConflictHorizon 33748 nredirected 0 ndead 2
        block_ref        | blkref #0: rel 1663/5/60221 fork main blk 2

           pg_get_wal_records_info(start_lsn pg_lsn, end_lsn pg_lsn) returns setof
                  record
                  Gets information of all the valid WAL records between start_lsn
                  and end_lsn. Returns one row per WAL record. If start_lsn or
                  end_lsn are not yet available, the function will raise an error.
                  For example:

        postgres=# SELECT * FROM pg_get_wal_records_info('0/1E913618', '0/1E913740') LIM
        IT 1;
        -[ RECORD 1 ]----+--------------------------------------------------------------
        start_lsn        | 0/1E913618
        end_lsn          | 0/1E913650
        prev_lsn         | 0/1E9135A0
        xid              | 0
        resource_manager | Standby
        record_type      | RUNNING_XACTS
        record_length    | 50
        main_data_length | 24
        fpi_length       | 0
        description      | nextXid 33775 latestCompletedXid 33774 oldestRunningXid 33775
        block_ref        |

           pg_get_wal_records_info_till_end_of_wal(start_lsn pg_lsn) returns setof
                  record
                  This function is the same as pg_get_wal_records_info(), except
                  that it gets information of all the valid WAL records from
                  start_lsn till the end of WAL.

           pg_get_wal_stats(start_lsn pg_lsn, end_lsn pg_lsn, per_record boolean
                  DEFAULT false) returns setof record
                  Gets statistics of all the valid WAL records between start_lsn
                  and end_lsn. By default, it returns one row per resource_manager
                  type. When per_record is set to true, it returns one row per
                  record_type. If start_lsn or end_lsn are not yet available, the
                  function will raise an error. For example:

        postgres=# SELECT * FROM pg_get_wal_stats('0/1E847D00', '0/1E84F500')
                   WHERE count > 0 AND
                         "resource_manager/record_type" = 'Transaction'
                   LIMIT 1;
        -[ RECORD 1 ]----------------+-------------------
        resource_manager/record_type | Transaction
        count                        | 2
        count_percentage             | 8
        record_size                  | 875
        record_size_percentage       | 41.23468426013195
        fpi_size                     | 0
        fpi_size_percentage          | 0
        combined_size                | 875
        combined_size_percentage     | 2.8634072910530795

           pg_get_wal_stats_till_end_of_wal(start_lsn pg_lsn, per_record boolean
                  DEFAULT false) returns setof record
                  This function is the same as pg_get_wal_stats(), except that it
                  gets statistics of all the valid WAL records from start_lsn till
                  end of WAL.

        F.37.2. Author

           Bharath Rupireddy <[11]bharath.rupireddyforpostgres@gmail.com>
             __________________________________________________________________

           [12]Prev              [13]Up             [14]Next
           F.36. pg_visibility  [15]Home  F.38. postgres_fdw


        ```
pgVersions:
- '16'
- '15'
