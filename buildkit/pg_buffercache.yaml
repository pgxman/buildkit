---
apiVersion: v1
name: pg_buffercache
repository: https://github.com/postgres/postgres
description: examine the shared buffer cache
license: PostgreSQL
arch:
- amd64
- arm64
maintainers:
- name: Jonathan Dance
  email: jd@hydra.so
- name: Owen Ou
  email: o@hydra.so
build:
  main:
  - name: Build pg_buffercache
    run: |
      cd contrib/pg_buffercache
      make
      DESTDIR=${DESTDIR} make install
overrides:
  pgVersions:
    '16':
      source: https://ftp.postgresql.org/pub/source/v16.1/postgresql-16.1.tar.gz
      version: 16.1.0
      homepage: https://www.postgresql.org/docs/16/pgbuffercache.html
      readme: |
        For formatted documentation, please see https://www.postgresql.org/docs/16/pgbuffercache.html.

        ```
           #[1]F.26. passwordcheck -- verify password strength [2]F.28. pgcrypto
           -- cryptographic functions

           F.27. pg_buffercache -- inspect PostgreSQL buffer cache state
           [3]Prev  [4]Up Appendix F. Additional Supplied Modules and Extensions
           [5]Home  [6]Next
             __________________________________________________________________

        F.27. pg_buffercache -- inspect PostgreSQL buffer cache state [7]#

           [8]F.27.1. The pg_buffercache View
           [9]F.27.2. The pg_buffercache_summary() Function
           [10]F.27.3. The pg_buffercache_usage_counts() Function
           [11]F.27.4. Sample Output
           [12]F.27.5. Authors

           The pg_buffercache module provides a means for examining what's
           happening in the shared buffer cache in real time.

           This module provides the pg_buffercache_pages() function (wrapped in
           the pg_buffercache view), the pg_buffercache_summary() function, and
           the pg_buffercache_usage_counts() function.

           The pg_buffercache_pages() function returns a set of records, each row
           describing the state of one shared buffer entry. The pg_buffercache
           view wraps the function for convenient use.

           The pg_buffercache_summary() function returns a single row summarizing
           the state of the shared buffer cache.

           The pg_buffercache_usage_counts() function returns a set of records,
           each row describing the number of buffers with a given usage count.

           By default, use is restricted to superusers and roles with privileges
           of the pg_monitor role. Access may be granted to others using GRANT.

        F.27.1. The pg_buffercache View [13]#

           The definitions of the columns exposed by the view are shown in
           [14]Table F.15.

           Table F.15. pg_buffercache Columns

           Column Type

           Description

           bufferid integer

           ID, in the range 1..shared_buffers

           relfilenode oid (references [15]pg_class.relfilenode)

           Filenode number of the relation

           reltablespace oid (references [16]pg_tablespace.oid)

           Tablespace OID of the relation

           reldatabase oid (references [17]pg_database.oid)

           Database OID of the relation

           relforknumber smallint

           Fork number within the relation; see common/relpath.h

           relblocknumber bigint

           Page number within the relation

           isdirty boolean

           Is the page dirty?

           usagecount smallint

           Clock-sweep access count

           pinning_backends integer

           Number of backends pinning this buffer

           There is one row for each buffer in the shared cache. Unused buffers
           are shown with all fields null except bufferid. Shared system catalogs
           are shown as belonging to database zero.

           Because the cache is shared by all the databases, there will normally
           be pages from relations not belonging to the current database. This
           means that there may not be matching join rows in pg_class for some
           rows, or that there could even be incorrect joins. If you are trying to
           join against pg_class, it's a good idea to restrict the join to rows
           having reldatabase equal to the current database's OID or zero.

           Since buffer manager locks are not taken to copy the buffer state data
           that the view will display, accessing pg_buffercache view has less
           impact on normal buffer activity but it doesn't provide a consistent
           set of results across all buffers. However, we ensure that the
           information of each buffer is self-consistent.

        F.27.2. The pg_buffercache_summary() Function [18]#

           The definitions of the columns exposed by the function are shown in
           [19]Table F.16.

           Table F.16. pg_buffercache_summary() Output Columns

           Column Type

           Description

           buffers_used int4

           Number of used shared buffers

           buffers_unused int4

           Number of unused shared buffers

           buffers_dirty int4

           Number of dirty shared buffers

           buffers_pinned int4

           Number of pinned shared buffers

           usagecount_avg float8

           Average usage count of used shared buffers

           The pg_buffercache_summary() function returns a single row summarizing
           the state of all shared buffers. Similar and more detailed information
           is provided by the pg_buffercache view, but pg_buffercache_summary() is
           significantly cheaper.

           Like the pg_buffercache view, pg_buffercache_summary() does not acquire
           buffer manager locks. Therefore concurrent activity can lead to minor
           inaccuracies in the result.

        F.27.3. The pg_buffercache_usage_counts() Function [20]#

           The definitions of the columns exposed by the function are shown in
           [21]Table F.17.

           Table F.17. pg_buffercache_usage_counts() Output Columns

           Column Type

           Description

           usage_count int4

           A possible buffer usage count

           buffers int4

           Number of buffers with the usage count

           dirty int4

           Number of dirty buffers with the usage count

           pinned int4

           Number of pinned buffers with the usage count

           The pg_buffercache_usage_counts() function returns a set of rows
           summarizing the states of all shared buffers, aggregated over the
           possible usage count values. Similar and more detailed information is
           provided by the pg_buffercache view, but pg_buffercache_usage_counts()
           is significantly cheaper.

           Like the pg_buffercache view, pg_buffercache_usage_counts() does not
           acquire buffer manager locks. Therefore concurrent activity can lead to
           minor inaccuracies in the result.

        F.27.4. Sample Output [22]#

        regression=# SELECT n.nspname, c.relname, count(*) AS buffers
                     FROM pg_buffercache b JOIN pg_class c
                     ON b.relfilenode = pg_relation_filenode(c.oid) AND
                        b.reldatabase IN (0, (SELECT oid FROM pg_database
                                              WHERE datname = current_database()))
                     JOIN pg_namespace n ON n.oid = c.relnamespace
                     GROUP BY n.nspname, c.relname
                     ORDER BY 3 DESC
                     LIMIT 10;

          nspname   |        relname         | buffers
        ------------+------------------------+---------
         public     | delete_test_table      |     593
         public     | delete_test_table_pkey |     494
         pg_catalog | pg_attribute           |     472
         public     | quad_poly_tbl          |     353
         public     | tenk2                  |     349
         public     | tenk1                  |     349
         public     | gin_test_idx           |     306
         pg_catalog | pg_largeobject         |     206
         public     | gin_test_tbl           |     188
         public     | spgist_text_tbl        |     182
        (10 rows)


        regression=# SELECT * FROM pg_buffercache_summary();
         buffers_used | buffers_unused | buffers_dirty | buffers_pinned | usagecount_avg
        --------------+----------------+---------------+----------------+---------------
        -
                  248 |        2096904 |            39 |              0 |       3.141129
        (1 row)


        regression=# SELECT * FROM pg_buffercache_usage_counts();
         usage_count | buffers | dirty | pinned
        -------------+---------+-------+--------
                   0 |   14650 |     0 |      0
                   1 |    1436 |   671 |      0
                   2 |     102 |    88 |      0
                   3 |      23 |    21 |      0
                   4 |       9 |     7 |      0
                   5 |     164 |   106 |      0
        (6 rows)

        F.27.5. Authors [23]#

           Mark Kirkwood <[24]markir@paradise.net.nz>

           Design suggestions: Neil Conway <[25]neilc@samurai.com>

           Debugging advice: Tom Lane <[26]tgl@sss.pgh.pa.us>
             __________________________________________________________________

           [27]Prev                                          [28]Up   [29]Next
           F.26. passwordcheck -- verify password strength  [30]Home
           F.28. pgcrypto -- cryptographic functions


        ```
    '15':
      source: https://ftp.postgresql.org/pub/source/v15.5/postgresql-15.5.tar.gz
      version: 15.5.0
      homepage: https://www.postgresql.org/docs/15/pgbuffercache.html
      readme: |
        For formatted documentation, please see https://www.postgresql.org/docs/15/pgbuffercache.html.

        ```
           #[1]F.26. passwordcheck [2]F.28. pgcrypto

                                    F.27. pg_buffercache
           [3]Prev  [4]Up Appendix F. Additional Supplied Modules [5]Home  [6]Next
             __________________________________________________________________

        F.27. pg_buffercache

           [7]F.27.1. The pg_buffercache View
           [8]F.27.2. Sample Output
           [9]F.27.3. Authors

           The pg_buffercache module provides a means for examining what's
           happening in the shared buffer cache in real time.

           The module provides a C function pg_buffercache_pages that returns a
           set of records, plus a view pg_buffercache that wraps the function for
           convenient use.

           By default, use is restricted to superusers and roles with privileges
           of the pg_monitor role. Access may be granted to others using GRANT.

        F.27.1. The pg_buffercache View

           The definitions of the columns exposed by the view are shown in
           [10]Table F.15.

           Table F.15. pg_buffercache Columns

           Column Type

           Description

           bufferid integer

           ID, in the range 1..shared_buffers

           relfilenode oid (references [11]pg_class.relfilenode)

           Filenode number of the relation

           reltablespace oid (references [12]pg_tablespace.oid)

           Tablespace OID of the relation

           reldatabase oid (references [13]pg_database.oid)

           Database OID of the relation

           relforknumber smallint

           Fork number within the relation; see common/relpath.h

           relblocknumber bigint

           Page number within the relation

           isdirty boolean

           Is the page dirty?

           usagecount smallint

           Clock-sweep access count

           pinning_backends integer

           Number of backends pinning this buffer

           There is one row for each buffer in the shared cache. Unused buffers
           are shown with all fields null except bufferid. Shared system catalogs
           are shown as belonging to database zero.

           Because the cache is shared by all the databases, there will normally
           be pages from relations not belonging to the current database. This
           means that there may not be matching join rows in pg_class for some
           rows, or that there could even be incorrect joins. If you are trying to
           join against pg_class, it's a good idea to restrict the join to rows
           having reldatabase equal to the current database's OID or zero.

           Since buffer manager locks are not taken to copy the buffer state data
           that the view will display, accessing pg_buffercache view has less
           impact on normal buffer activity but it doesn't provide a consistent
           set of results across all buffers. However, we ensure that the
           information of each buffer is self-consistent.

        F.27.2. Sample Output

        regression=# SELECT n.nspname, c.relname, count(*) AS buffers
                     FROM pg_buffercache b JOIN pg_class c
                     ON b.relfilenode = pg_relation_filenode(c.oid) AND
                        b.reldatabase IN (0, (SELECT oid FROM pg_database
                                              WHERE datname = current_database()))
                     JOIN pg_namespace n ON n.oid = c.relnamespace
                     GROUP BY n.nspname, c.relname
                     ORDER BY 3 DESC
                     LIMIT 10;

          nspname   |        relname         | buffers
        ------------+------------------------+---------
         public     | delete_test_table      |     593
         public     | delete_test_table_pkey |     494
         pg_catalog | pg_attribute           |     472
         public     | quad_poly_tbl          |     353
         public     | tenk2                  |     349
         public     | tenk1                  |     349
         public     | gin_test_idx           |     306
         pg_catalog | pg_largeobject         |     206
         public     | gin_test_tbl           |     188
         public     | spgist_text_tbl        |     182
        (10 rows)

        F.27.3. Authors

           Mark Kirkwood <[14]markir@paradise.net.nz>

           Design suggestions: Neil Conway <[15]neilc@samurai.com>

           Debugging advice: Tom Lane <[16]tgl@sss.pgh.pa.us>
             __________________________________________________________________

           [17]Prev              [18]Up         [19]Next
           F.26. passwordcheck  [20]Home  F.28. pgcrypto


        ```
    '14':
      source: https://ftp.postgresql.org/pub/source/v14.10/postgresql-14.10.tar.gz
      version: 14.10.0
      homepage: https://www.postgresql.org/docs/14/pgbuffercache.html
      readme: |
        For formatted documentation, please see https://www.postgresql.org/docs/14/pgbuffercache.html.

        ```
           #[1]F.24. passwordcheck [2]F.26. pgcrypto

                                    F.25. pg_buffercache
           [3]Prev  [4]Up Appendix F. Additional Supplied Modules [5]Home  [6]Next
             __________________________________________________________________

        F.25. pg_buffercache

           [7]F.25.1. The pg_buffercache View
           [8]F.25.2. Sample Output
           [9]F.25.3. Authors

           The pg_buffercache module provides a means for examining what's
           happening in the shared buffer cache in real time.

           The module provides a C function pg_buffercache_pages that returns a
           set of records, plus a view pg_buffercache that wraps the function for
           convenient use.

           By default, use is restricted to superusers and members of the
           pg_monitor role. Access may be granted to others using GRANT.

        F.25.1. The pg_buffercache View

           The definitions of the columns exposed by the view are shown in
           [10]Table F.15.

           Table F.15. pg_buffercache Columns

           Column Type

           Description

           bufferid integer

           ID, in the range 1..shared_buffers

           relfilenode oid (references [11]pg_class.relfilenode)

           Filenode number of the relation

           reltablespace oid (references [12]pg_tablespace.oid)

           Tablespace OID of the relation

           reldatabase oid (references [13]pg_database.oid)

           Database OID of the relation

           relforknumber smallint

           Fork number within the relation; see common/relpath.h

           relblocknumber bigint

           Page number within the relation

           isdirty boolean

           Is the page dirty?

           usagecount smallint

           Clock-sweep access count

           pinning_backends integer

           Number of backends pinning this buffer

           There is one row for each buffer in the shared cache. Unused buffers
           are shown with all fields null except bufferid. Shared system catalogs
           are shown as belonging to database zero.

           Because the cache is shared by all the databases, there will normally
           be pages from relations not belonging to the current database. This
           means that there may not be matching join rows in pg_class for some
           rows, or that there could even be incorrect joins. If you are trying to
           join against pg_class, it's a good idea to restrict the join to rows
           having reldatabase equal to the current database's OID or zero.

           Since buffer manager locks are not taken to copy the buffer state data
           that the view will display, accessing pg_buffercache view has less
           impact on normal buffer activity but it doesn't provide a consistent
           set of results across all buffers. However, we ensure that the
           information of each buffer is self-consistent.

        F.25.2. Sample Output

        regression=# SELECT n.nspname, c.relname, count(*) AS buffers
                     FROM pg_buffercache b JOIN pg_class c
                     ON b.relfilenode = pg_relation_filenode(c.oid) AND
                        b.reldatabase IN (0, (SELECT oid FROM pg_database
                                              WHERE datname = current_database()))
                     JOIN pg_namespace n ON n.oid = c.relnamespace
                     GROUP BY n.nspname, c.relname
                     ORDER BY 3 DESC
                     LIMIT 10;

          nspname   |        relname         | buffers
        ------------+------------------------+---------
         public     | delete_test_table      |     593
         public     | delete_test_table_pkey |     494
         pg_catalog | pg_attribute           |     472
         public     | quad_poly_tbl          |     353
         public     | tenk2                  |     349
         public     | tenk1                  |     349
         public     | gin_test_idx           |     306
         pg_catalog | pg_largeobject         |     206
         public     | gin_test_tbl           |     188
         public     | spgist_text_tbl        |     182
        (10 rows)

        F.25.3. Authors

           Mark Kirkwood <[14]markir@paradise.net.nz>

           Design suggestions: Neil Conway <[15]neilc@samurai.com>

           Debugging advice: Tom Lane <[16]tgl@sss.pgh.pa.us>
             __________________________________________________________________

           [17]Prev              [18]Up         [19]Next
           F.24. passwordcheck  [20]Home  F.26. pgcrypto


        ```
    '13':
      source: https://ftp.postgresql.org/pub/source/v13.13/postgresql-13.13.tar.gz
      version: 13.13.0
      homepage: https://www.postgresql.org/docs/13/pgbuffercache.html
      readme: |
        For formatted documentation, please see https://www.postgresql.org/docs/13/pgbuffercache.html.

        ```
           #[1]F.23. passwordcheck [2]F.25. pgcrypto

                                    F.24. pg_buffercache
           [3]Prev  [4]Up Appendix F. Additional Supplied Modules [5]Home  [6]Next
             __________________________________________________________________

        F.24. pg_buffercache

           [7]F.24.1. The pg_buffercache View
           [8]F.24.2. Sample Output
           [9]F.24.3. Authors

           The pg_buffercache module provides a means for examining what's
           happening in the shared buffer cache in real time.

           The module provides a C function pg_buffercache_pages that returns a
           set of records, plus a view pg_buffercache that wraps the function for
           convenient use.

           By default, use is restricted to superusers and members of the
           pg_monitor role. Access may be granted to others using GRANT.

        F.24.1. The pg_buffercache View

           The definitions of the columns exposed by the view are shown in
           [10]Table F.15.

           Table F.15. pg_buffercache Columns

           Column Type

           Description

           bufferid integer

           ID, in the range 1..shared_buffers

           relfilenode oid (references [11]pg_class.relfilenode)

           Filenode number of the relation

           reltablespace oid (references [12]pg_tablespace.oid)

           Tablespace OID of the relation

           reldatabase oid (references [13]pg_database.oid)

           Database OID of the relation

           relforknumber smallint

           Fork number within the relation; see include/common/relpath.h

           relblocknumber bigint

           Page number within the relation

           isdirty boolean

           Is the page dirty?

           usagecount smallint

           Clock-sweep access count

           pinning_backends integer

           Number of backends pinning this buffer

           There is one row for each buffer in the shared cache. Unused buffers
           are shown with all fields null except bufferid. Shared system catalogs
           are shown as belonging to database zero.

           Because the cache is shared by all the databases, there will normally
           be pages from relations not belonging to the current database. This
           means that there may not be matching join rows in pg_class for some
           rows, or that there could even be incorrect joins. If you are trying to
           join against pg_class, it's a good idea to restrict the join to rows
           having reldatabase equal to the current database's OID or zero.

           Since buffer manager locks are not taken to copy the buffer state data
           that the view will display, accessing pg_buffercache view has less
           impact on normal buffer activity but it doesn't provide a consistent
           set of results across all buffers. However, we ensure that the
           information of each buffer is self-consistent.

        F.24.2. Sample Output

        regression=# SELECT n.nspname, c.relname, count(*) AS buffers
                     FROM pg_buffercache b JOIN pg_class c
                     ON b.relfilenode = pg_relation_filenode(c.oid) AND
                        b.reldatabase IN (0, (SELECT oid FROM pg_database
                                              WHERE datname = current_database()))
                     JOIN pg_namespace n ON n.oid = c.relnamespace
                     GROUP BY n.nspname, c.relname
                     ORDER BY 3 DESC
                     LIMIT 10;

          nspname   |        relname         | buffers
        ------------+------------------------+---------
         public     | delete_test_table      |     593
         public     | delete_test_table_pkey |     494
         pg_catalog | pg_attribute           |     472
         public     | quad_poly_tbl          |     353
         public     | tenk2                  |     349
         public     | tenk1                  |     349
         public     | gin_test_idx           |     306
         pg_catalog | pg_largeobject         |     206
         public     | gin_test_tbl           |     188
         public     | spgist_text_tbl        |     182
        (10 rows)

        F.24.3. Authors

           Mark Kirkwood <[14]markir@paradise.net.nz>

           Design suggestions: Neil Conway <[15]neilc@samurai.com>

           Debugging advice: Tom Lane <[16]tgl@sss.pgh.pa.us>
             __________________________________________________________________

           [17]Prev              [18]Up         [19]Next
           F.23. passwordcheck  [20]Home  F.25. pgcrypto


        ```
pgVersions:
- '16'
- '15'
- '14'
- '13'
