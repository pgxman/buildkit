---
apiVersion: v1
name: dict_xsyn
repository: https://github.com/postgres/postgres
description: text search dictionary template for extended synonym processing
license: PostgreSQL
arch:
- amd64
- arm64
maintainers:
- name: Jonathan Dance
  email: jd@hydra.so
- name: Owen Ou
  email: o@hydra.so
build:
  main:
  - name: Build dict_xsyn
    run: |
      cd contrib/dict_xsyn
      make
      DESTDIR=${DESTDIR} make install
overrides:
  pgVersions:
    '16':
      source: https://ftp.postgresql.org/pub/source/v16.1/postgresql-16.1.tar.gz
      version: 16.1.0
      homepage: https://www.postgresql.org/docs/16/dict-xsyn.html
      readme: |
        For formatted documentation, please see https://www.postgresql.org/docs/16/dict-xsyn.html.

        ```
           #[1]F.13. dict_int -- example full-text search dictionary for integers
           [2]F.15. earthdistance -- calculate great-circle distances

           F.14. dict_xsyn -- example synonym full-text search dictionary
           [3]Prev  [4]Up Appendix F. Additional Supplied Modules and Extensions
           [5]Home  [6]Next
             __________________________________________________________________

        F.14. dict_xsyn -- example synonym full-text search dictionary [7]#

           [8]F.14.1. Configuration
           [9]F.14.2. Usage

           dict_xsyn (Extended Synonym Dictionary) is an example of an add-on
           dictionary template for full-text search. This dictionary type replaces
           words with groups of their synonyms, and so makes it possible to search
           for a word using any of its synonyms.

        F.14.1. Configuration [10]#

           A dict_xsyn dictionary accepts the following options:
             * matchorig controls whether the original word is accepted by the
               dictionary. Default is true.
             * matchsynonyms controls whether the synonyms are accepted by the
               dictionary. Default is false.
             * keeporig controls whether the original word is included in the
               dictionary's output. Default is true.
             * keepsynonyms controls whether the synonyms are included in the
               dictionary's output. Default is true.
             * rules is the base name of the file containing the list of synonyms.
               This file must be stored in $SHAREDIR/tsearch_data/ (where
               $SHAREDIR means the PostgreSQL installation's shared-data
               directory). Its name must end in .rules (which is not to be
               included in the rules parameter).

           The rules file has the following format:
             * Each line represents a group of synonyms for a single word, which
               is given first on the line. Synonyms are separated by whitespace,
               thus:
        word syn1 syn2 syn3

             * The sharp (#) sign is a comment delimiter. It may appear at any
               position in a line. The rest of the line will be skipped.

           Look at xsyn_sample.rules, which is installed in
           $SHAREDIR/tsearch_data/, for an example.

        F.14.2. Usage [11]#

           Installing the dict_xsyn extension creates a text search template
           xsyn_template and a dictionary xsyn based on it, with default
           parameters. You can alter the parameters, for example
        mydb# ALTER TEXT SEARCH DICTIONARY xsyn (RULES='my_rules', KEEPORIG=false);
        ALTER TEXT SEARCH DICTIONARY

           or create new dictionaries based on the template.

           To test the dictionary, you can try
        mydb=# SELECT ts_lexize('xsyn', 'word');
              ts_lexize
        -----------------------
         {syn1,syn2,syn3}

        mydb# ALTER TEXT SEARCH DICTIONARY xsyn (RULES='my_rules', KEEPORIG=true);
        ALTER TEXT SEARCH DICTIONARY

        mydb=# SELECT ts_lexize('xsyn', 'word');
              ts_lexize
        -----------------------
         {word,syn1,syn2,syn3}

        mydb# ALTER TEXT SEARCH DICTIONARY xsyn (RULES='my_rules', KEEPORIG=false, MATCH
        SYNONYMS=true);
        ALTER TEXT SEARCH DICTIONARY

        mydb=# SELECT ts_lexize('xsyn', 'syn1');
              ts_lexize
        -----------------------
         {syn1,syn2,syn3}

        mydb# ALTER TEXT SEARCH DICTIONARY xsyn (RULES='my_rules', KEEPORIG=true, MATCHO
        RIG=false, KEEPSYNONYMS=false);
        ALTER TEXT SEARCH DICTIONARY

        mydb=# SELECT ts_lexize('xsyn', 'syn1');
              ts_lexize
        -----------------------
         {word}

           Real-world usage will involve including it in a text search
           configuration as described in [12]Chapter 12. That might look like
           this:
        ALTER TEXT SEARCH CONFIGURATION english
            ALTER MAPPING FOR word, asciiword WITH xsyn, english_stem;
             __________________________________________________________________

           [13]Prev  [14]Up  [15]Next
           F.13. dict_int -- example full-text search dictionary for integers
           [16]Home  F.15. earthdistance -- calculate great-circle distances


        ```
    '15':
      source: https://ftp.postgresql.org/pub/source/v15.5/postgresql-15.5.tar.gz
      version: 15.5.0
      homepage: https://www.postgresql.org/docs/15/dict-xsyn.html
      readme: |
        For formatted documentation, please see https://www.postgresql.org/docs/15/dict-xsyn.html.

        ```
           #[1]F.13. dict_int [2]F.15. earthdistance

                                      F.14. dict_xsyn
           [3]Prev  [4]Up Appendix F. Additional Supplied Modules [5]Home  [6]Next
             __________________________________________________________________

        F.14. dict_xsyn

           [7]F.14.1. Configuration
           [8]F.14.2. Usage

           dict_xsyn (Extended Synonym Dictionary) is an example of an add-on
           dictionary template for full-text search. This dictionary type replaces
           words with groups of their synonyms, and so makes it possible to search
           for a word using any of its synonyms.

        F.14.1. Configuration

           A dict_xsyn dictionary accepts the following options:
             * matchorig controls whether the original word is accepted by the
               dictionary. Default is true.
             * matchsynonyms controls whether the synonyms are accepted by the
               dictionary. Default is false.
             * keeporig controls whether the original word is included in the
               dictionary's output. Default is true.
             * keepsynonyms controls whether the synonyms are included in the
               dictionary's output. Default is true.
             * rules is the base name of the file containing the list of synonyms.
               This file must be stored in $SHAREDIR/tsearch_data/ (where
               $SHAREDIR means the PostgreSQL installation's shared-data
               directory). Its name must end in .rules (which is not to be
               included in the rules parameter).

           The rules file has the following format:
             * Each line represents a group of synonyms for a single word, which
               is given first on the line. Synonyms are separated by whitespace,
               thus:
        word syn1 syn2 syn3

             * The sharp (#) sign is a comment delimiter. It may appear at any
               position in a line. The rest of the line will be skipped.

           Look at xsyn_sample.rules, which is installed in
           $SHAREDIR/tsearch_data/, for an example.

        F.14.2. Usage

           Installing the dict_xsyn extension creates a text search template
           xsyn_template and a dictionary xsyn based on it, with default
           parameters. You can alter the parameters, for example
        mydb# ALTER TEXT SEARCH DICTIONARY xsyn (RULES='my_rules', KEEPORIG=false);
        ALTER TEXT SEARCH DICTIONARY

           or create new dictionaries based on the template.

           To test the dictionary, you can try
        mydb=# SELECT ts_lexize('xsyn', 'word');
              ts_lexize
        -----------------------
         {syn1,syn2,syn3}

        mydb# ALTER TEXT SEARCH DICTIONARY xsyn (RULES='my_rules', KEEPORIG=true);
        ALTER TEXT SEARCH DICTIONARY

        mydb=# SELECT ts_lexize('xsyn', 'word');
              ts_lexize
        -----------------------
         {word,syn1,syn2,syn3}

        mydb# ALTER TEXT SEARCH DICTIONARY xsyn (RULES='my_rules', KEEPORIG=false, MATCH
        SYNONYMS=true);
        ALTER TEXT SEARCH DICTIONARY

        mydb=# SELECT ts_lexize('xsyn', 'syn1');
              ts_lexize
        -----------------------
         {syn1,syn2,syn3}

        mydb# ALTER TEXT SEARCH DICTIONARY xsyn (RULES='my_rules', KEEPORIG=true, MATCHO
        RIG=false, KEEPSYNONYMS=false);
        ALTER TEXT SEARCH DICTIONARY

        mydb=# SELECT ts_lexize('xsyn', 'syn1');
              ts_lexize
        -----------------------
         {word}

           Real-world usage will involve including it in a text search
           configuration as described in [9]Chapter 12. That might look like this:
        ALTER TEXT SEARCH CONFIGURATION english
            ALTER MAPPING FOR word, asciiword WITH xsyn, english_stem;
             __________________________________________________________________

           [10]Prev         [11]Up              [12]Next
           F.13. dict_int  [13]Home  F.15. earthdistance


        ```
    '14':
      source: https://ftp.postgresql.org/pub/source/v14.10/postgresql-14.10.tar.gz
      version: 14.10.0
      homepage: https://www.postgresql.org/docs/14/dict-xsyn.html
      readme: |
        For formatted documentation, please see https://www.postgresql.org/docs/14/dict-xsyn.html.

        ```
           #[1]F.11. dict_int [2]F.13. earthdistance

                                      F.12. dict_xsyn
           [3]Prev  [4]Up Appendix F. Additional Supplied Modules [5]Home  [6]Next
             __________________________________________________________________

        F.12. dict_xsyn

           [7]F.12.1. Configuration
           [8]F.12.2. Usage

           dict_xsyn (Extended Synonym Dictionary) is an example of an add-on
           dictionary template for full-text search. This dictionary type replaces
           words with groups of their synonyms, and so makes it possible to search
           for a word using any of its synonyms.

        F.12.1. Configuration

           A dict_xsyn dictionary accepts the following options:
             * matchorig controls whether the original word is accepted by the
               dictionary. Default is true.
             * matchsynonyms controls whether the synonyms are accepted by the
               dictionary. Default is false.
             * keeporig controls whether the original word is included in the
               dictionary's output. Default is true.
             * keepsynonyms controls whether the synonyms are included in the
               dictionary's output. Default is true.
             * rules is the base name of the file containing the list of synonyms.
               This file must be stored in $SHAREDIR/tsearch_data/ (where
               $SHAREDIR means the PostgreSQL installation's shared-data
               directory). Its name must end in .rules (which is not to be
               included in the rules parameter).

           The rules file has the following format:
             * Each line represents a group of synonyms for a single word, which
               is given first on the line. Synonyms are separated by whitespace,
               thus:
        word syn1 syn2 syn3

             * The sharp (#) sign is a comment delimiter. It may appear at any
               position in a line. The rest of the line will be skipped.

           Look at xsyn_sample.rules, which is installed in
           $SHAREDIR/tsearch_data/, for an example.

        F.12.2. Usage

           Installing the dict_xsyn extension creates a text search template
           xsyn_template and a dictionary xsyn based on it, with default
           parameters. You can alter the parameters, for example
        mydb# ALTER TEXT SEARCH DICTIONARY xsyn (RULES='my_rules', KEEPORIG=false);
        ALTER TEXT SEARCH DICTIONARY

           or create new dictionaries based on the template.

           To test the dictionary, you can try
        mydb=# SELECT ts_lexize('xsyn', 'word');
              ts_lexize
        -----------------------
         {syn1,syn2,syn3}

        mydb# ALTER TEXT SEARCH DICTIONARY xsyn (RULES='my_rules', KEEPORIG=true);
        ALTER TEXT SEARCH DICTIONARY

        mydb=# SELECT ts_lexize('xsyn', 'word');
              ts_lexize
        -----------------------
         {word,syn1,syn2,syn3}

        mydb# ALTER TEXT SEARCH DICTIONARY xsyn (RULES='my_rules', KEEPORIG=false, MATCH
        SYNONYMS=true);
        ALTER TEXT SEARCH DICTIONARY

        mydb=# SELECT ts_lexize('xsyn', 'syn1');
              ts_lexize
        -----------------------
         {syn1,syn2,syn3}

        mydb# ALTER TEXT SEARCH DICTIONARY xsyn (RULES='my_rules', KEEPORIG=true, MATCHO
        RIG=false, KEEPSYNONYMS=false);
        ALTER TEXT SEARCH DICTIONARY

        mydb=# SELECT ts_lexize('xsyn', 'syn1');
              ts_lexize
        -----------------------
         {word}

           Real-world usage will involve including it in a text search
           configuration as described in [9]Chapter 12. That might look like this:
        ALTER TEXT SEARCH CONFIGURATION english
            ALTER MAPPING FOR word, asciiword WITH xsyn, english_stem;
             __________________________________________________________________

           [10]Prev         [11]Up              [12]Next
           F.11. dict_int  [13]Home  F.13. earthdistance


        ```
    '13':
      source: https://ftp.postgresql.org/pub/source/v13.13/postgresql-13.13.tar.gz
      version: 13.13.0
      homepage: https://www.postgresql.org/docs/13/dict-xsyn.html
      readme: |
        For formatted documentation, please see https://www.postgresql.org/docs/13/dict-xsyn.html.

        ```
           #[1]F.11. dict_int [2]F.13. earthdistance

                                      F.12. dict_xsyn
           [3]Prev  [4]Up Appendix F. Additional Supplied Modules [5]Home  [6]Next
             __________________________________________________________________

        F.12. dict_xsyn

           [7]F.12.1. Configuration
           [8]F.12.2. Usage

           dict_xsyn (Extended Synonym Dictionary) is an example of an add-on
           dictionary template for full-text search. This dictionary type replaces
           words with groups of their synonyms, and so makes it possible to search
           for a word using any of its synonyms.

        F.12.1. Configuration

           A dict_xsyn dictionary accepts the following options:
             * matchorig controls whether the original word is accepted by the
               dictionary. Default is true.
             * matchsynonyms controls whether the synonyms are accepted by the
               dictionary. Default is false.
             * keeporig controls whether the original word is included in the
               dictionary's output. Default is true.
             * keepsynonyms controls whether the synonyms are included in the
               dictionary's output. Default is true.
             * rules is the base name of the file containing the list of synonyms.
               This file must be stored in $SHAREDIR/tsearch_data/ (where
               $SHAREDIR means the PostgreSQL installation's shared-data
               directory). Its name must end in .rules (which is not to be
               included in the rules parameter).

           The rules file has the following format:
             * Each line represents a group of synonyms for a single word, which
               is given first on the line. Synonyms are separated by whitespace,
               thus:
        word syn1 syn2 syn3

             * The sharp (#) sign is a comment delimiter. It may appear at any
               position in a line. The rest of the line will be skipped.

           Look at xsyn_sample.rules, which is installed in
           $SHAREDIR/tsearch_data/, for an example.

        F.12.2. Usage

           Installing the dict_xsyn extension creates a text search template
           xsyn_template and a dictionary xsyn based on it, with default
           parameters. You can alter the parameters, for example
        mydb# ALTER TEXT SEARCH DICTIONARY xsyn (RULES='my_rules', KEEPORIG=false);
        ALTER TEXT SEARCH DICTIONARY

           or create new dictionaries based on the template.

           To test the dictionary, you can try
        mydb=# SELECT ts_lexize('xsyn', 'word');
              ts_lexize
        -----------------------
         {syn1,syn2,syn3}

        mydb# ALTER TEXT SEARCH DICTIONARY xsyn (RULES='my_rules', KEEPORIG=true);
        ALTER TEXT SEARCH DICTIONARY

        mydb=# SELECT ts_lexize('xsyn', 'word');
              ts_lexize
        -----------------------
         {word,syn1,syn2,syn3}

        mydb# ALTER TEXT SEARCH DICTIONARY xsyn (RULES='my_rules', KEEPORIG=false, MATCH
        SYNONYMS=true);
        ALTER TEXT SEARCH DICTIONARY

        mydb=# SELECT ts_lexize('xsyn', 'syn1');
              ts_lexize
        -----------------------
         {syn1,syn2,syn3}

        mydb# ALTER TEXT SEARCH DICTIONARY xsyn (RULES='my_rules', KEEPORIG=true, MATCHO
        RIG=false, KEEPSYNONYMS=false);
        ALTER TEXT SEARCH DICTIONARY

        mydb=# SELECT ts_lexize('xsyn', 'syn1');
              ts_lexize
        -----------------------
         {word}

           Real-world usage will involve including it in a text search
           configuration as described in [9]Chapter 12. That might look like this:
        ALTER TEXT SEARCH CONFIGURATION english
            ALTER MAPPING FOR word, asciiword WITH xsyn, english_stem;
             __________________________________________________________________

           [10]Prev         [11]Up              [12]Next
           F.11. dict_int  [13]Home  F.13. earthdistance


        ```
pgVersions:
- '16'
- '15'
- '14'
- '13'
