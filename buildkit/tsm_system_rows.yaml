---
apiVersion: v1
name: tsm_system_rows
repository: https://github.com/postgres/postgres
description: TABLESAMPLE method which accepts number of rows as a limit
license: PostgreSQL
arch:
- amd64
- arm64
maintainers:
- name: Jonathan Dance
  email: jd@hydra.so
- name: Owen Ou
  email: o@hydra.so
build:
  main:
  - name: Build tsm_system_rows
    run: |
      cd contrib/tsm_system_rows
      make
      DESTDIR=${DESTDIR} make install
overrides:
  pgVersions:
    '16':
      source: https://ftp.postgresql.org/pub/source/v16.1/postgresql-16.1.tar.gz
      version: 16.1.0
      homepage: https://www.postgresql.org/docs/16/tsm-system-rows.html
      readme: |
        For formatted documentation, please see https://www.postgresql.org/docs/16/tsm-system-rows.html.

        ```
           #[1]F.45. test_decoding -- SQL-based test/example module for WAL
           logical decoding [2]F.47. tsm_system_time -- the SYSTEM_TIME sampling
           method for TABLESAMPLE

           F.46. tsm_system_rows -- the SYSTEM_ROWS sampling method for
           TABLESAMPLE
           [3]Prev  [4]Up Appendix F. Additional Supplied Modules and Extensions
           [5]Home  [6]Next
             __________________________________________________________________

        F.46. tsm_system_rows -- the SYSTEM_ROWS sampling method for TABLESAMPLE [7]#

           [8]F.46.1. Examples

           The tsm_system_rows module provides the table sampling method
           SYSTEM_ROWS, which can be used in the TABLESAMPLE clause of a [9]SELECT
           command.

           This table sampling method accepts a single integer argument that is
           the maximum number of rows to read. The resulting sample will always
           contain exactly that many rows, unless the table does not contain
           enough rows, in which case the whole table is selected.

           Like the built-in SYSTEM sampling method, SYSTEM_ROWS performs
           block-level sampling, so that the sample is not completely random but
           may be subject to clustering effects, especially if only a small number
           of rows are requested.

           SYSTEM_ROWS does not support the REPEATABLE clause.

           This module is considered "trusted", that is, it can be installed by
           non-superusers who have CREATE privilege on the current database.

        F.46.1. Examples [10]#

           Here is an example of selecting a sample of a table with SYSTEM_ROWS.
           First install the extension:
        CREATE EXTENSION tsm_system_rows;

           Then you can use it in a SELECT command, for instance:
        SELECT * FROM my_table TABLESAMPLE SYSTEM_ROWS(100);

           This command will return a sample of 100 rows from the table my_table
           (unless the table does not have 100 visible rows, in which case all its
           rows are returned).
             __________________________________________________________________

           [11]Prev  [12]Up  [13]Next
           F.45. test_decoding -- SQL-based test/example module for WAL logical
           decoding  [14]Home  F.47. tsm_system_time -- the SYSTEM_TIME sampling
           method for TABLESAMPLE


        ```
    '15':
      source: https://ftp.postgresql.org/pub/source/v15.5/postgresql-15.5.tar.gz
      version: 15.5.0
      homepage: https://www.postgresql.org/docs/15/tsm-system-rows.html
      readme: |
        For formatted documentation, please see https://www.postgresql.org/docs/15/tsm-system-rows.html.

        ```
           #[1]F.45. test_decoding [2]F.47. tsm_system_time

                                   F.46. tsm_system_rows
           [3]Prev  [4]Up Appendix F. Additional Supplied Modules [5]Home  [6]Next
             __________________________________________________________________

        F.46. tsm_system_rows

           [7]F.46.1. Examples

           The tsm_system_rows module provides the table sampling method
           SYSTEM_ROWS, which can be used in the TABLESAMPLE clause of a [8]SELECT
           command.

           This table sampling method accepts a single integer argument that is
           the maximum number of rows to read. The resulting sample will always
           contain exactly that many rows, unless the table does not contain
           enough rows, in which case the whole table is selected.

           Like the built-in SYSTEM sampling method, SYSTEM_ROWS performs
           block-level sampling, so that the sample is not completely random but
           may be subject to clustering effects, especially if only a small number
           of rows are requested.

           SYSTEM_ROWS does not support the REPEATABLE clause.

           This module is considered "trusted", that is, it can be installed by
           non-superusers who have CREATE privilege on the current database.

        F.46.1. Examples

           Here is an example of selecting a sample of a table with SYSTEM_ROWS.
           First install the extension:
        CREATE EXTENSION tsm_system_rows;

           Then you can use it in a SELECT command, for instance:
        SELECT * FROM my_table TABLESAMPLE SYSTEM_ROWS(100);

           This command will return a sample of 100 rows from the table my_table
           (unless the table does not have 100 visible rows, in which case all its
           rows are returned).
             __________________________________________________________________

           [9]Prev               [10]Up                [11]Next
           F.45. test_decoding  [12]Home  F.47. tsm_system_time


        ```
    '14':
      source: https://ftp.postgresql.org/pub/source/v14.10/postgresql-14.10.tar.gz
      version: 14.10.0
      homepage: https://www.postgresql.org/docs/14/tsm-system-rows.html
      readme: |
        For formatted documentation, please see https://www.postgresql.org/docs/14/tsm-system-rows.html.

        ```
           #[1]F.42. test_decoding [2]F.44. tsm_system_time

                                   F.43. tsm_system_rows
           [3]Prev  [4]Up Appendix F. Additional Supplied Modules [5]Home  [6]Next
             __________________________________________________________________

        F.43. tsm_system_rows

           [7]F.43.1. Examples

           The tsm_system_rows module provides the table sampling method
           SYSTEM_ROWS, which can be used in the TABLESAMPLE clause of a [8]SELECT
           command.

           This table sampling method accepts a single integer argument that is
           the maximum number of rows to read. The resulting sample will always
           contain exactly that many rows, unless the table does not contain
           enough rows, in which case the whole table is selected.

           Like the built-in SYSTEM sampling method, SYSTEM_ROWS performs
           block-level sampling, so that the sample is not completely random but
           may be subject to clustering effects, especially if only a small number
           of rows are requested.

           SYSTEM_ROWS does not support the REPEATABLE clause.

           This module is considered "trusted", that is, it can be installed by
           non-superusers who have CREATE privilege on the current database.

        F.43.1. Examples

           Here is an example of selecting a sample of a table with SYSTEM_ROWS.
           First install the extension:
        CREATE EXTENSION tsm_system_rows;

           Then you can use it in a SELECT command, for instance:
        SELECT * FROM my_table TABLESAMPLE SYSTEM_ROWS(100);

           This command will return a sample of 100 rows from the table my_table
           (unless the table does not have 100 visible rows, in which case all its
           rows are returned).
             __________________________________________________________________

           [9]Prev               [10]Up                [11]Next
           F.42. test_decoding  [12]Home  F.44. tsm_system_time


        ```
    '13':
      source: https://ftp.postgresql.org/pub/source/v13.13/postgresql-13.13.tar.gz
      version: 13.13.0
      homepage: https://www.postgresql.org/docs/13/tsm-system-rows.html
      readme: |
        For formatted documentation, please see https://www.postgresql.org/docs/13/tsm-system-rows.html.

        ```
           #[1]F.40. test_decoding [2]F.42. tsm_system_time

                                   F.41. tsm_system_rows
           [3]Prev  [4]Up Appendix F. Additional Supplied Modules [5]Home  [6]Next
             __________________________________________________________________

        F.41. tsm_system_rows

           [7]F.41.1. Examples

           The tsm_system_rows module provides the table sampling method
           SYSTEM_ROWS, which can be used in the TABLESAMPLE clause of a [8]SELECT
           command.

           This table sampling method accepts a single integer argument that is
           the maximum number of rows to read. The resulting sample will always
           contain exactly that many rows, unless the table does not contain
           enough rows, in which case the whole table is selected.

           Like the built-in SYSTEM sampling method, SYSTEM_ROWS performs
           block-level sampling, so that the sample is not completely random but
           may be subject to clustering effects, especially if only a small number
           of rows are requested.

           SYSTEM_ROWS does not support the REPEATABLE clause.

           This module is considered "trusted", that is, it can be installed by
           non-superusers who have CREATE privilege on the current database.

        F.41.1. Examples

           Here is an example of selecting a sample of a table with SYSTEM_ROWS.
           First install the extension:
        CREATE EXTENSION tsm_system_rows;

           Then you can use it in a SELECT command, for instance:
        SELECT * FROM my_table TABLESAMPLE SYSTEM_ROWS(100);

           This command will return a sample of 100 rows from the table my_table
           (unless the table does not have 100 visible rows, in which case all its
           rows are returned).
             __________________________________________________________________

           [9]Prev               [10]Up                [11]Next
           F.40. test_decoding  [12]Home  F.42. tsm_system_time


        ```
pgVersions:
- '16'
- '15'
- '14'
- '13'
