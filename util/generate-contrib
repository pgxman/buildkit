#!/bin/bash
#
# ./generate-contrib PG_RELEASE_VERSION [REVISION_NUMBER]
#
# ./generate-contrib 15.5 1
#
# Generates minimal buildkits for all extensions in the contrib/ directory of a given
# Postgres release, specified as $1. Output goes to out/. Extensions unable to be
# processed are printed to out/unable.txt. Will leave behind the Postgres source code
# in ./postgresql-$1.

PGVERSION=$1
REVISION=${2:-0}

SED=$(which -s gsed && echo gsed || echo sed)

function generate_yaml() {
  ext=$1
  comment=$2
  slug=$(detect_slug $ext)
  pg_major_version=$(echo $PGVERSION | cut -d . -f 1)
  output_file="out/${ext | tr - _}.yaml"
  echo "generating $ext..."
  cat <<EOF >$output_file
apiVersion: v1
name: $ext
version: "$PGVERSION.$REVISION"
homepage: https://www.postgresql.org/docs/15/$slug.html
repository: https://github.com/postgres/postgres
source: https://ftp.postgresql.org/pub/source/v$PGVERSION/postgresql-$PGVERSION.tar.gz
description: $comment
license: PostgreSQL
arch:
  - amd64
  - arm64
maintainers:
  - name: Jonathan Dance
    email: jd@hydra.so
build:
  main:
    - name: Build $ext
      run: |
        cd contrib/$ext
        make
        DESTDIR=\${DESTDIR} make install
pgVersions:
  - "$pg_major_version"
EOF

  append_readme $slug $output_file
}

function require_util() {
  which -s $1 || (echo "$1 is required" && exit 1)
}

function append_readme() {
  slug=$1
  output_file=$2

  cat <<EOF >>$output_file
readme: |
  For formatted documentation, please see https://www.postgresql.org/docs/15/$slug.html.
EOF
  echo '  ' >>$output_file
  echo '  ```' >>$output_file

  lynx -dump ./postgresql-$PGVERSION/doc/src/sgml/html/$slug.html \
    | $SED -E -e '/References/,$d' -e 's/\[[0-9]+\]//g' -e 's/^/  /' \
    >>$output_file

  echo '  ```' >>$output_file
}

function detect_slug() {
  ext=$1
  slug=$(echo $ext | tr _ -)
  try_slug $slug && echo $slug && return
  slug=$(echo $ext | tr -d _)
  try_slug $slug && echo $slug && return
}

function try_slug() {
  slug=$1
  test -f ./postgresql-$PGVERSION/doc/src/sgml/html/$slug.html
  return $?
}

require_util wget
require_util lynx
require_util tar
require_util sed
require_util grep
require_util tr

if [ -z "$1" ]; then
  echo 'first argument (PGVERSION) is required' && exit 1
fi

mkdir -p out
rm -f out/unable.txt

if [ ! -d postgresql-$PGVERSION ]; then
  wget https://ftp.postgresql.org/pub/source/v$PGVERSION/postgresql-$PGVERSION.tar.gz
  tar xjf postgresql-$PGVERSION.tar.gz
fi

for dir in $(find ./postgresql-$PGVERSION/contrib -type d -depth 1)
do
  ext=$(basename $dir)
  if [ -f $dir/$ext.control ]; then
    comment=$(cat $dir/$ext.control | grep ^comment | cut -f 2 -d = | $SED -E 's/^ +//' | tr -d \')
    requires=$(cat $dir/$ext.control | grep ^requires | cut -f 2 -d = | $SED -E 's/^ +//' | tr -d \')
    if [ -z "$requires" ]; then
      generate_yaml $ext "$comment"
    else
      echo unable to process $ext: has dependencies >&2
      echo $ext >> out/unable.txt
    fi
  else
    echo unable to process $ext: could not find control file >&2
    echo $ext >> out/unable.txt
  fi
done
